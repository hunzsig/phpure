<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2015/12/03
 * Time: 9:09
 */

namespace Finance\Model;

use Common\Map\IsEnable;
use Finance\Bean\WithdrawBean;

use library\Pgsql;

class WithdrawModel extends AbstractModel
{

    /**
     * @return WithdrawBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * @param \library\Pgsql $model
     * @return \library\Pgsql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $bean->getUid() && $model->in('uid', $bean->getUid());
        $bean->getStatus() && $model->in('status', $bean->getStatus());
        return $model;
    }

    /**
     * 获取用户条件列表
     * @return mixed|null
     */
    public function getList()
    {
        $bean = $this->getBean();
        $model = $this->db()->table('finance_withdraw');
        $model = $this->bindWhere($model);
        if ($bean->getPage()) {
            $list = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $list = $model->multi();
        }
        return $this->success($this->factoryData($list, function ($tempData) {
            $IsEnableMap = (new IsEnable())->getKV();
            foreach ($tempData as $k => $v) {
                ($v['status']) && $tempData[$k]['status_label'] = $IsEnableMap[$v['status']];
            }
        }));
    }

    /**
     * 获取某用户提现条件信息
     * @return array
     */
    public function getInfo()
    {
        $bean = $this->getBean();
        if (!$bean->getUid()) return $this->error('lose uid');
        $withdrawInfo = $this->db()->table('finance_withdraw')->equalTo('uid', $bean->getUid())->one();
        if (!$withdrawInfo) {
            //如果没有提现过，则创建一套默认的提现规则给会员
            try {
                if (!$this->db()->table('finance_withdraw')->insert(array('uid' => $bean->getUid()))) {
                    throw new \Exception('提现初始化失败 #add');
                }
            } catch (\Exception $e) {
                return $this->error($e->getMessage());
            }
            $withdrawInfo = $this->db()->table('finance_withdraw')->equalTo('uid', $bean->getUid())->one();
        }
        return $this->success($this->factoryData($withdrawInfo, function ($tempData) {
            $IsEnableMap = (new IsEnable())->getKV();
            foreach ($tempData as $k => $v) {
                ($v['status']) && $tempData[$k]['status_label'] = $IsEnableMap[$v['status']];
            }
        }));
    }


    /**
     * 编辑提现条件
     * @return array
     */
    public function edit()
    {
        $bean = $this->getBean();
        if (!$bean->getUid()) return $this->error('用户信息错误');

        //判断
        //金额范围
        $judgeMin = $bean->getPreMinLimit();
        $judgeMax = $bean->getPreMaxLimit();
        if (!$judgeMin || !$judgeMax) {
            $reqInfo = $this->db()->table('finance_withdraw')->equalTo('uid', $bean->getUid())->one();
            !$judgeMin && $judgeMin = $reqInfo['min_amount'];
            !$judgeMax && $judgeMax = $reqInfo['max_amount'];
        }
        if ($bean->getPreMinLimit() && $bean->getPreMinLimit() < 0.01) {
            return $this->error('金额下限最低0.01元');
        }
        if ($judgeMin >= $judgeMax) {
            return $this->error('金额下限不得大于或等于上限');
        }
        //状态许可
        if ($bean->getStatus() && $bean->getStatus() != IsEnable::no && $bean->getStatus() != IsEnable::yes) {
            return $this->error('状态错误拒绝操作');
        }

        //edit
        $reqData = array();
        $bean->getPreMinLimit() && $reqData['min_amount'] = $bean->getPreMinLimit();
        $bean->getPreMaxLimit() && $reqData['max_amount'] = $bean->getPreMaxLimit();
        $bean->getCoolingPeriod() !== null && $reqData['cooling_period'] = $bean->getCoolingPeriod();
        $bean->getStatus() && $reqData['status'] = $bean->getStatus();
        if (!$reqData) return $this->error('没有可以保存的~');
        try {
            $this->db()->table('finance_withdraw')->equalTo('uid', $bean->getUid())->update($reqData);
        } catch (\Exception $e) {
            return $this->error($this->db()->getError());
        }
        return $this->success();
    }

}