<?php

namespace Dom\Model;

/**
 * @date: 2018/06/26
 */


use Assets\Model\HossModel;
use Common\Map\IsEnable;
use Dom\Map\DomType;

class DomModel extends AbstractModel
{

    const FieldStrDom = '*';
    const FieldStrDomCategory = 'name as category_name';

    /**
     * @return \Dom\Bean\DomBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \library\Mysql
     */
    private function getViewModel()
    {
        $model = $this->db()->table('dom')
            ->join('dom', 'dom_category AS cate', array('category_key' => 'key'), 'INNER')
            ->field(self::FieldStrDom, 'dom')
            ->field(self::FieldStrDomCategory, 'cate');
        return $model;
    }

    /**
     * @param \library\Mysql $model
     * @return \library\Mysql $model
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $model->whereTable('dom');
        $bean->getId() && $model->in('id', $bean->getId());
        $bean->getType() && $model->in('type', $bean->getType());
        $bean->getCategoryKey() && $model->in('category_key', $bean->getCategoryKey());
        $bean->getStatus() && $model->in('status', $bean->getStatus());
        $bean->getUid() && $model->in('uid', $bean->getUid());
        $bean->getCreateTime() && $model->between('create_time', $bean->getCreateTime());
        $bean->getUpdateTime() && $model->between('update_time', $bean->getUpdateTime());
        $bean->getHasImg() && $model->like('data', '%<img src=%');//检测是否有图片
        $bean->getData() && $model->json('data', $bean->getData());
        $model->whereTable('cate');
        $bean->getCategoryName() && $model->like('name', "%" . $bean->getCategoryName() . "%");
        $bean->getCategoryParentId() && $model->in('parent_id', $bean->getCategoryParentId());
        $model->whereTable(null);
        return $model;
    }

    private function getPrevDom($id)
    {
        $result = array();
        if ($id) {
            $model = $this->db()->table('dom');
            $model = $this->bindWhere($model)
                ->lessThan('id', $id)
                ->orderBy('id', 'desc');
            $result = $model->one();
        }
        return $result;
    }

    private function getNextDom($id)
    {
        $result = array();
        if ($id) {
            $model = $this->db()->table('dom');
            $model = $this->bindWhere($model)
                ->lessThan('id', $id)
                ->orderBy('id', 'asc');
            $result = $model->one();
        }
        return $result;
    }

    /**
     * @param null $data
     * @param string $response
     * @return array
     */
    protected function success($data = null, $response = 'success')
    {
        if (!is_array($data)) {
            return parent::success($data, $response);
        }
        return parent::success($this->factoryData($data, function ($tempData) {
            $enable = (new IsEnable());
            $domTypeMap = (new DomType());
            foreach ($tempData as $k => $v) {
                ($v['dom_status']) && $tempData[$k]['dom_status_label'] = $enable->getKV()[$v['dom_status']];
                ($v['dom_type']) && $tempData[$k]['dom_type_label'] = $domTypeMap->getKV()[$v['dom_type']];
                //todo data
                switch ($v['dom_type']) {
                    case DomType::article:
                        preg_match('/<img(.*)src="(.*)"(.*)>/', $tempData[$k]['dom_data']['content'], $imgStr);
                        if ($imgStr) {
                            $imgStr = $imgStr[2];
                            $imgStr = reset(explode("\"", $imgStr));
                            $imgStr = reset(explode('\'', $imgStr));
                            $imgStr = reset(explode(" ", $imgStr));
                            $tempData[$k]['dom_data']['content_first_pic'] = $imgStr;
                        }
                        $tempData[$k]['dom_data']['content_strip_tags'] = strip_tags($tempData[$k]['dom_data']['content']);
                        $tempData[$k]['dom_data']['content_strip_tags'] = str_replace('&nbsp;', '', $tempData[$k]['dom_data']['content_strip_tags']);
                        break;
                    case DomType::pics:
                        preg_match_all('/<img(.*?)src="(.*?)"(.*?)>/', $tempData[$k]['dom_data']['pics'], $pics);
                        $tempData[$k]['dom_data']['pics_address'] = $pics[2];
                        break;
                    default:
                        break;
                }
            }
            return $tempData;
        }), $response);
    }


    /**
     * 获取列表
     * @return array
     */
    public function getList()
    {
        $bean = $this->getBean();
        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        if ($bean->getOrderBy()) {
            $model->orderByStr($bean->getOrderBy());
        } else {
            $model->orderBy('ordering', 'desc');
            $model->orderBy('update_time', 'desc');
        }
        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($result);
    }

    /**
     * 根据ID获取信息
     * @return array
     */
    public function getInfo()
    {
        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        $result = $model->one();
        $id = $result['dom_id'];
        if ($id) {
            $result['prev_dom'] = $this->getPrevDom($id);
            $result['next_dom'] = $this->getNextDom($id);
        }
        return $this->success($result);
    }

    /**
     * 新增文档
     * @return array
     */
    public function add()
    {
        $bean = $this->getBean();
        if (!$bean->getType()) return $this->error('类型错误');
        if (!$bean->getCategoryKey()) return $this->error('请选择文档分类');
        $typeMap = (new DomType())->getKV();
        $typeMap = array_keys($typeMap);
        if (!in_array($bean->getType(), $typeMap)) {
            return $this->error('类型不被允许');
        }
        $HossModel = (new HossModel($this->getIO()));
        $domData = $bean->getData();
        foreach ($domData as $k => $d) {
            $domData[$k] = $HossModel->getHtmlDataSource__($d);
        }
        try {
            $data = array();
            $data['type'] = $bean->getType();
            $data['create_time'] = $this->db()->now();
            $data['verify_uid'] = '-1';
            $data['uid'] = $bean->getAuthUid();
            $data['category_key'] = $bean->getCategoryKey();
            $bean->getStatus() && $data['status'] = $bean->getStatus();
            $domData && $data['data'] = $domData;
            is_numeric($bean->getOrdering()) && $data['ordering'] = $bean->getOrdering();
            if (!$this->db()->table('dom')->insert($data)) {
                throw new \Exception($this->db()->getError());
            }
            $id = $this->db()->lastInsertId();
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success($id);
    }

    /**
     * 编辑文档
     * @return array
     */
    public function edit()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数错误');
        $domData = null;
        if ($bean->getData()) {
            $HossModel = (new HossModel($this->getIO()));
            $domData = $bean->getData();
            foreach ($domData as $k => $d) {
                $domData[$k] = $HossModel->getHtmlDataSource__($d);
            }
        }
        try {
            $data = array();
            $data['update_time'] = $this->db()->now();
            $bean->getType() && $data['type'] = $bean->getType();
            $bean->getCategoryKey() && $data['category_key'] = $bean->getCategoryKey();
            $bean->getStatus() && $data['status'] = $bean->getStatus();
            $domData && $data['data'] = $domData;
            is_numeric($bean->getOrdering()) && $data['ordering'] = $bean->getOrdering();
            $this->db()->table('dom')->where(array('id' => $bean->getId()))->update($data);
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }


    /**
     * 改变文档状态
     * @return array
     */
    public function changeStatus()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数丢失');
        if (!$bean->getStatus()) return $this->error('参数丢失');
        try {
            $this->db()->table('dom')
                ->in('id', $bean->getId())
                ->update(array('status' => $bean->getStatus(), 'verify_uid' => $bean->getAuthUid()));
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 删除文档
     * @return array
     */
    public function del()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数丢失');
        try {
            $this->db()->table('dom')
                ->in('id', $bean->getId())
                ->delete();
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 浏览
     * @return array
     */
    public function inc()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数错误');
        try {
            $this->db()->table('dom')
                ->equalTo('id', $bean->getId())
                ->update(array('views' => array('exp', 'views+1')));
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 统计 - total
     * @return array
     */
    public function getStatistics()
    {
        $bean = $this->getBean();
        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        $model = $this->bindWhere($model);
        $bean->getOrderBy() && $model->orderByStr($bean->getOrderBy());
        $model->statRange($bean->getStatTimeRange(), 'create_time');
        $result = $model->multi();
        return $result;
    }

}