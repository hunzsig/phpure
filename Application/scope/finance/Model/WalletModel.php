<?php
/**
 * Created by PhpStorm.
 * Date: 2018/05/10
 */

namespace Finance\Model;

use Common\Map\IsEnable;
use Finance\Bean\CommissionInstallmentBean;
use Finance\Bean\WalletBean;
use Finance\Map\CommissionType;
use Finance\Map\WalletType;
use Finance\Helper\PayPassword as PayPasswordHelper;
use System\Model\AuthModel;

class WalletModel extends AbstractModel
{

    protected $uid = 0;
    protected $walletInfo = array();
    protected $walletId = 0;
    protected $payPassword = null;

    protected $payPasswordHelper;

    /**
     * @return WalletBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    private function getPayPasswordHelper()
    {
        if (!$this->payPasswordHelper) $this->payPasswordHelper = new PayPasswordHelper();
        return $this->payPasswordHelper;
    }

    /**
     * @param int $uid
     * @return boolean
     */
    private function init($uid)
    {
        if (!$uid) return $this->false('缺少用户ID');
        $this->uid = $uid;
        $this->walletInfo = $this->db()->table('finance_wallet')->equalTo('uid', $this->uid)->one();
        if (!$this->walletInfo) { // 如果此用户没有钱包，则建一个
            try {
                if (!$this->db()->table('finance_wallet')->insert(array('uid' => $this->uid, 'create_time' => $this->db()->now()))) {
                    return $this->false('创建钱包失败！' . $this->db()->getError());
                }
            } catch (\Exception $e) {
                return $this->false($e->getMessage());
            }
            $this->walletInfo = $this->db()->table('finance_wallet')->equalTo('uid', $this->uid)->one();
        }
        return true;
    }

    /**
     * 获取钱包信息
     * @return mixed
     */
    private function getWalletInfo()
    {
        return $this->walletInfo;
    }

    /**
     * 获取钱包信息
     * @return mixed
     */
    private function getWalletId()
    {
        return $this->walletInfo['finance_wallet_id'] ?? 0;
    }

    /**
     * 获取余额
     * @return mixed
     */
    private function getBalance()
    {
        return round($this->getWalletInfo()['finance_wallet_balance'], 6);
    }

    /**
     * 获取绑定余额
     * @return mixed
     */
    private function getBalanceLock()
    {
        return round($this->getWalletInfo()['finance_wallet_balance_lock'], 6);
    }

    /**
     * 获取积分
     * @return mixed
     */
    private function getCredit()
    {
        return round($this->getWalletInfo()['finance_wallet_credit'], 6);
    }

    /**
     * 获取冻结余额
     * @return mixed
     */
    private function getFreezeBalance()
    {
        return round($this->getWalletInfo()['finance_wallet_freeze_balance'], 6);
    }

    /**
     * 获取冻结绑定余额
     * @return mixed
     */
    private function getFreezeBalanceLock()
    {
        return round($this->getWalletInfo()['finance_wallet_freeze_balance_lock'], 6);
    }

    /**
     * 获取冻结积分
     * @return mixed
     */
    private function getFreezeCredit()
    {
        return round($this->getWalletInfo()['finance_wallet_freeze_credit'], 6);
    }

    /**
     * 获取钱包状态
     * @return mixed
     */
    private function getStatus()
    {
        return $this->getWalletInfo()['finance_wallet_status'];
    }

    /**
     * 获取支付密码
     * @return mixed
     */
    private function getPayPassword()
    {
        return $this->getWalletInfo()['finance_wallet_pay_password'];
    }

    /**
     * 根据不同的type 处理数据
     * @param WalletBean $bean
     * @return WalletBean
     * @throws \Exception
     */
    private function dialyseBean(WalletBean $bean)
    {
        $balance = round($bean->getBalance(), 6);
        $balance_lock = round($bean->getBalanceLock(), 6);
        $credit = round($bean->getCredit(), 6);
        switch ($bean->getType()) {
            case WalletType::RECHARGE:
            case WalletType::RECHARGE_BACKGROUND:
            case WalletType::REGISTER_AWARD:
            case WalletType::COMMISSION_RECHARGE_AWARD:
            case WalletType::ORDER_CANCEL:
            case WalletType::REFUND_REIMBURSE:
            case WalletType::REFUND_REJECT:
                $balance = abs($balance);
                $balance_lock = abs($balance_lock);
                $credit = abs($credit);
                $freeze_balance = 0;
                $freeze_balance_lock = 0;
                $freeze_credit = 0;
                break;
            case WalletType::DEDUCT:
            case WalletType::DEDUCT_BACKGROUND:
            case WalletType::SHOPPING:
                $balance = -abs($balance);
                $balance_lock = -abs($balance_lock);
                $credit = -abs($credit);
                $freeze_balance = 0;
                $freeze_balance_lock = 0;
                $freeze_credit = 0;
                break;
            case WalletType::FREEZE:
            case WalletType::WITHDRAW_APPLY:
                $balance = -abs($balance);
                $balance_lock = -abs($balance_lock);
                $credit = -abs($credit);
                $freeze_balance = abs($balance);
                $freeze_balance_lock = abs($balance_lock);
                $freeze_credit = abs($credit);
                break;
            case WalletType::UNFREEZE:
            case WalletType::WITHDRAW_REJECT:
                $balance = abs($balance);
                $balance_lock = abs($balance_lock);
                $credit = abs($credit);
                $freeze_balance = -abs($balance);
                $freeze_balance_lock = -abs($balance_lock);
                $freeze_credit = -abs($credit);
                break;
            case WalletType::FREEZE_DEDUCT:
            case WalletType::WITHDRAW_PASS:
                $balance = 0;
                $balance_lock = 0;
                $credit = 0;
                $freeze_balance = -abs($balance);
                $freeze_balance_lock = -abs($balance_lock);
                $freeze_credit = -abs($credit);
                break;
            default:
                throw new \Exception('非法的类型');
                break;
        }
        $balance = round($balance, 6);
        $balance_lock = round($balance_lock, 6);
        $credit = round($credit, 6);
        $freeze_balance = round($freeze_balance, 6);
        $freeze_balance_lock = round($freeze_balance_lock, 6);
        $freeze_credit = round($freeze_credit, 6);
        //检测钱包是否能承受操作
        if ($balance < 0 && $this->getBalance() < abs($balance)) {
            throw new \Exception('余额不足');
        }
        if ($balance_lock < 0 && $this->getBalanceLock() < abs($balance_lock)) {
            throw new \Exception('绑定余额不足');
        }
        if ($credit < 0 && $this->getCredit() < abs($credit)) {
            throw new \Exception('积分不足');
        }
        if ($freeze_balance < 0 && $this->getFreezeBalance() < abs($freeze_balance)) {
            throw new \Exception('冻结的余额不足');
        }
        if ($freeze_balance_lock < 0 && $this->getFreezeBalanceLock() < abs($freeze_balance_lock)) {
            throw new \Exception('冻结的绑定余额不足');
        }
        if ($freeze_credit < 0 && $this->getFreezeCredit() < abs($freeze_credit)) {
            throw new \Exception('冻结的积分不足');
        }
        //写入bean
        $bean->setBalance($balance);
        $bean->setBalanceLock($balance_lock);
        $bean->setCredit($credit);
        $bean->setFreezeBalance($freeze_balance);
        $bean->setFreezeBalanceLock($freeze_balance_lock);
        $bean->setFreezeCredit($freeze_credit);
        return $bean;
    }

    /**
     * 建立钱包日志
     * @param WalletBean $bean
     * @return WalletBean
     * @throws \Exception
     */
    private function buildLog(WalletBean $bean)
    {
        $typeMap = (new WalletType())->getKV();
        $typeExt = $typeMap[$bean->getType()];
        $data = array();
        $data['create_time'] = $this->db()->now();
        $data['operator_uid'] = $bean->getAuthUid();
        $data['uid'] = $this->uid;
        $data['wallet_id'] = $this->getWalletId();
        $data['balance'] = $bean->getBalance();
        $data['balance_lock'] = $bean->getBalanceLock();
        $data['credit'] = $bean->getCredit();
        $data['freeze_balance'] = $bean->getFreezeBalance();
        $data['freeze_balance_lock'] = $bean->getFreezeBalanceLock();
        $data['freeze_credit'] = $bean->getFreezeCredit();
        $data['type'] = $bean->getType();
        $data['description'] = "[{$typeExt}]" . $bean->getDescription();
        $data['data'] = $bean->getData();
        $this->db()->table('finance_wallet_log')->insert($data);
        return $bean;
    }

    /**
     * 根据配置器执行【电子钱包】操作
     * @param WalletBean $bean
     * @return bool
     * @throws \Exception
     */
    private function build(WalletBean $bean)
    {
        $walletId = $this->getWalletId();
        if (!$walletId) throw new \Exception('walletID错误');
        $data = array();
        if ($bean->getBalance() != 0) $data['balance'] = array('exp', "balance + {$bean->getBalance()}");
        if ($bean->getBalanceLock() != 0) $data['balance_lock'] = array('exp', "balance_lock + {$bean->getBalanceLock()}");
        if ($bean->getCredit() != 0) $data['credit'] = array('exp', "credit + {$bean->getCredit()}");
        if ($bean->getFreezeBalance() != 0) $data['freeze_balance'] = array('exp', "freeze_balance + {$bean->getFreezeBalance()}");
        if ($bean->getFreezeBalanceLock() != 0) $data['freeze_balance_lock'] = array('exp', "freeze_balance_lock + {$bean->getFreezeBalanceLock()}");
        if ($bean->getFreezeCredit() != 0) $data['freeze_credit'] = array('exp', "freeze_credit + {$bean->getFreezeCredit()}");
        $this->db()->table('finance_wallet')->equalTo('id', $walletId)->update($data);
        return true;
    }

    /**
     * 修改钱包状态
     * @param $walletId
     * @param $status
     * @return array
     */
    private function changeUserStatus($walletId, $status)
    {
        if (!$walletId) return $this->error('钱包ID错误');
        try {
            $this->db()->table('finance_wallet')->in('id', $walletId)->update(array('status' => $status));
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        $this->db()->redisClear('user');
        return $this->success();
    }


    /**
     * @param $amount
     * @return bool
     */
    private function specialRechargeAward($amount)
    {
        //TODO 本人充值赠送积分
        $bean = (new CommissionInstallmentBean());
        $bean->setType(CommissionType::recharge_award);
        $bean->setUid($this->uid);
        $bean->setBalanceLock($amount);
        $model = (new CommissionInstallmentModel($this->getIO()));
        if (!$model->add__($bean)) {
            return $this->false($model->getFalseMsg());
        }
        return true;
    }

    //---------------------------------------------------------------

    /**
     * 是否已设置支付密码（继承接口）
     * @param $uid
     * @return bool
     */
    public function isSetPassword__($uid)
    {
        if (!$this->init($uid)) return $this->false($this->getFalseMsg());
        return ($this->getPayPassword()) ? true : false;
    }

    /**
     * 验证支付密码（继承接口）
     * @param $uid
     * @param $password
     * @return boolean
     */
    public function authPayPassword__($uid, $password)
    {
        if (!$this->init($uid)) return $this->false($this->getFalseMsg());
        if (!$password) return $this->false('请输入支付密码');
        return $this->getPayPasswordHelper()->Password($password) == $this->getPayPassword() ? true : $this->false('密码错误');
    }

    /**
     * 钱包入口（继承接口）
     * @param WalletBean $bean
     * @return boolean
     */
    public function gateWay__(WalletBean $bean)
    {
        if (!$bean) return $this->false('参数错误');
        if (!$bean->getType()) return $this->false('类型错误');
        if (!$this->init($bean->getUid())) return $this->false($this->getFalseMsg());
        if ($bean->isCheckPassword()){
            // 检测状态
            if ($this->getStatus() != IsEnable::yes) return $this->false('钱包已被封锁，暂时无法进行任何操作');
            // 验证密码
            if (!$this->isSetPassword__($bean->getUid())) return $this->false('尚未设置支付密码');
            if (!$this->authPayPassword__($bean->getUid(),$bean->getPayPassword())) {
                return $this->false($this->getFalseMsg());
            }
        } else {
            $authInfo = $this->db()->table('user')->field('platform')->equalTo('uid', $bean->getAuthUid())->one();
            if (empty($authInfo['user_platform']) || !in_array('admin', $authInfo['user_platform'])) {
                return $this->false('无权操作');
            }
        }
        //开启事务
        $this->db()->beginTrans();
        try {
            //todo 根据不同的type 处理数据，包括钱包各值边界
            $bean = $this->dialyseBean($bean);
            //todo 写日志
            $bean = $this->buildLog($bean);
            //todo 插表
            $this->build($bean);
            //todo sp
            // $this->specialRechargeAward($bean->getBalanceLock());
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->false($e->getMessage());
        }
        $this->db()->commitTrans();
        $this->db()->redisClear('user');
        return true;
    }

    /** ------------------------------- */

    /**
     * 是否已设置支付密码
     */
    public function isSetPassword()
    {
        return $this->success($this->isSetPassword__($this->getBean()->getUid() ? '1' : '-1'));
    }

    /**
     * 设置支付密码 - 手机验证
     * @return array
     */
    public function setPayPassword()
    {
        $bean = $this->getBean();
        $newPassword = $bean->getPayPassword();
        $conformPassword = $bean->getPayPasswordConfirm();
        $mobile = $bean->getMobile();
        $authCode = $bean->getAuthCode();
        if (!$authCode) return $this->error('缺少验证码');
        if (!$newPassword) return $this->error('缺少新密码');
        if (!$this->getPayPasswordHelper()->checkPwd($newPassword)) {
            return $this->error($this->getPayPasswordHelper()->getFalseMsg());
        }
        if (!$conformPassword) return $this->error('未确认密码');
        if ($newPassword != $conformPassword) return $this->error('两次密码不一致');
        if (!$this->init($bean->getUid())) return $this->error($this->getFalseMsg());
        try {
            //判断验证码
            $model = new AuthModel($this->getIO());
            if (!$model->authCheckMobile__($mobile, $authCode, $this->uid)) {
                return $this->error($model->getFalseMsg());
            }
            $this->payPassword = $this->getPayPasswordHelper()->Password($newPassword);
            $data = array(
                'pay_password' => $this->payPassword,
                'pay_password_level' => $this->getPayPasswordHelper()->getPwdLevel($newPassword),
            );
            $this->db()->table('finance_wallet')->update($data, array('id' => $this->getWalletId()));
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 钱包入口
     * @return array
     */
    public function gateWay()
    {
        $bean = $this->getBean();
        $bean->setCheckPassword(false);
        if (!$this->gateWay__($bean)) {
            return $this->error($this->getFalseMsg());
        }
        return $this->success();
    }

    /**
     * 钱包入口 - 检查密码
     * @return array
     */
    public function gateWayCheckPwd()
    {
        $bean = $this->getBean();
        $bean->setCheckPassword(true);
        if (!$this->gateWay__($bean)) {
            return $this->error($this->getFalseMsg());
        }
        return $this->success();
    }

    /**
     * 钱包 - 可用
     * @return array
     */
    public function status2enable()
    {
        if (!$this->init($this->getBean()->getUid())) return $this->error($this->getFalseMsg());
        return $this->changeUserStatus($this->getWalletId(), IsEnable::yes);
    }

    /**
     * 钱包 - 封锁
     * @return array
     */
    public function status2disable()
    {
        if (!$this->init($this->getBean()->getUid())) return $this->error($this->getFalseMsg());
        return $this->changeUserStatus($this->getWalletId(), IsEnable::no);
    }







    //todo 日志查询相关

    /**
     * 获取列表
     * @return array
     */
    public function getLog()
    {
        $bean = $this->getBean();
        $model = $this->db()
            ->table('finance_wallet_log')
            ->join('finance_wallet_log','user',array('operator_uid'=>'uid'),'LEFT')
            ->field('*','finance_wallet_log')
            ->field('mobile,identity_name,login_name','user');

        $model->whereTable('finance_wallet_log');
        $bean->getType() && $model->equalTo('type', $bean->getType());
        $bean->getCreateTime() && $model->between('create_time', $bean->getCreateTime());
        $bean->getUid() && $model->equalTo('uid', $bean->getUid());
        $bean->getWalletId() && $model->equalTo('wallet_id', $bean->getWalletId());
        $model->whereTable('user');
        $bean->getOperatorIdentityName() && $model->like('identity_name', "%".$bean->getOperatorIdentityName()."%");
        $bean->getOperatorLoginName() && $model->like('login_name', "%".$bean->getOperatorLoginName()."%");
        $bean->getOperatorMobile() && $model->like('mobile', "%".$bean->getOperatorMobile()."%");

        $model->orderBy('create_time', 'desc','finance_wallet_log');

        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($this->factoryData($result, function ($tempData) {
            $typeMap = (new WalletType())->getKV();
            foreach ($tempData as $k => $v) {
                $tempData[$k]['finance_wallet_log_type_label'] = $typeMap[$v['finance_wallet_log_type']];
            }
            return $tempData;
        }));
    }


}