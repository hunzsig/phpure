<?php
namespace Finance\Model;

use Common\Map\IsEnable;
use Common\Map\IsSure;
use Finance\Bean\CommissionInstallmentBean;
use Finance\Bean\WalletBean;
use Finance\Map\DateTimeUnit;
use Finance\Map\CommissionType;
use Finance\Map\WalletType;

class CommissionInstallmentModel extends AbstractModel{

    /**
     * @return CommissionInstallmentBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    private function getViewModel(){
        return $this->db()->table('finance_commission_installment')
            ->join('finance_commission_installment','user_info AS to_user',array('uid'=>'uid'),'LEFT')
            ->join('to_user','user_base as to_user_base',array('uuid'=>'uuid'),'LEFT')
            ->join('finance_commission_installment','user_info AS from_user',array('from_uid'=>'uid'),'LEFT')
            ->join('from_user','user_base as from_user_base',array('uuid'=>'uuid'),'LEFT')
            ->field('*','finance_commission_installment')
            ->field('nickname as to_user_nickname','to_user')
            ->field('mobile as to_user_mobile','to_user_base')
            ->field('nickname as from_user_nickname','from_user')
            ->field('mobile as from_user_mobile','from_user_base');
    }

    /**
     * @param \library\Pgsql $model
     * @return \library\Pgsql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $model->whereTable('finance_commission_installment');
        $model->notEqualTo('is_enable',IsEnable::del);
        $bean->getId()                          && $model->in('id',$bean->getId());
        $bean->getType()                        && $model->in('type',$bean->getType());
        $bean->getUid()                         && $model->equalTo('uid',$bean->getUid());
        $bean->getFromUid()                     && $model->equalTo('from_uid',$bean->getFromUid());
        $bean->getInstallmentsUnit()            && $model->equalTo('installments_unit',$bean->getInstallmentsUnit());
        $bean->getIsEnable()                    && $model->equalTo('is_enable',$bean->getIsEnable());
        $bean->getIsOver()                      && $model->equalTo('is_over',$bean->getIsOver());
        $bean->getData()                        && $model->equalTo('data',$bean->getData());
        $bean->getCreateTime()                  && $model->between('create_time',$bean->getCreateTime());
        $bean->getOrderNo()                     && $model->like('order_no',"%".$bean->getOrderNo()."%");
        is_numeric($bean->getNumberOfInstallments()) && $model->equalTo('number_of_installments',$bean->getNumberOfInstallments());
        is_numeric($bean->getCurrentNumberOfInstallments()) && $model->equalTo('current_number_of_installments',$bean->getCurrentNumberOfInstallments());
        $model->whereTable('to_user_base');
        $bean->getMobile() && $model->like('mobile',"%".$bean->getMobile()."%");
        $model->whereTable('from_user_base');
        $bean->getFromMobile() && $model->like('mobile',"%".$bean->getFromMobile()."%");
        return $model;
    }

    /**
     * 数据格式化
     * @param $data
     * @return array
     */
    private function dataFactory($data){
        $tempData = (isset($data['page'])) ? $data['data'] : $data;
        if(!is_array(reset($tempData))){
            $tempData && $tempData = array($tempData);
        }
        $typeMap = (new CommissionType())->getKV();
        $isSureMap = (new IsSure())->getKV();
        $isEnableMap = (new IsEnable())->getKV();
        $commissionInstallmentsUnitMap = (new DateTimeUnit())->getKV();
        $roleMapWithNameMap = $this->getRoleMapWithName();
        foreach ($tempData as $k => $v){
            ($v['type'])                && $tempData[$k]['type_label'] = $typeMap[$v['type']];
            ($v['is_over'])             && $tempData[$k]['is_over_label'] = $isSureMap[$v['is_over']];
            ($v['is_enable'])           && $tempData[$k]['is_enable_label'] = $isEnableMap[$v['is_enable']];
            ($v['installments_unit'])   && $tempData[$k]['installments_unit_label'] = $commissionInstallmentsUnitMap[$v['installments_unit']];
            $tempData[$k]['data'] = json_decode($v['data'],true) ? : $v['data'];
            //TODO 替换掉角色名称
            foreach($roleMapWithNameMap as $rk=>$rv){
                if(strpos($tempData[$k]['type_label'],$rk)!==false){
                    $tempData[$k]['type_label'] = str_replace($rk,$rv,$tempData[$k]['type_label']);
                }
                if(strpos($tempData[$k]['desc'],$rk)!==false){
                    $tempData[$k]['desc'] = str_replace($rk,$rv,$tempData[$k]['desc']);
                }
            }
        }
        if($data && !is_array(reset($data))) $tempData = reset($tempData);
        if(isset($data['page'])){
            $temp = array();
            $temp['data'] = $tempData;
            $temp['page'] = $data['page'];
            $tempData = $temp;
        }
        return $tempData;
    }

    /**
     * 判断配置里面的值是否符合要求
     * @param $configList
     * @param $configKey
     * @return bool
     */
    private function judgeConfig($configList,$configKey){
        $error = null;
        foreach($configKey as $v){
            if(!isset($configList[$v])){
                $error = "[$v]不存在";
                break;
            }
        }
        return $error ? $this->false($error): true;
    }

    /**
     * 获取列表
     * @return array
     */
    public function getList(){
        $bean = $this->getBean();
        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        if($bean->getOrderBy()){
            $model->orderByStr($bean->getOrderBy());
        }else{
            $model->orderBy('create_time','desc');
        }
        if($bean->getPage()){
            $result = $model->page($bean->getPageCurrent(),$bean->getPagePer());
        }else{
            $result = $model->multi();
        }
        return $this->success($result ? $this->dataFactory($result) : $result);
    }

    /**
     * 获取信息
     * @return array
     */
    public function getInfo(){
        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        $result = $model->one();
        return $this->success($result ? $this->dataFactory($result) : array());
    }

    /**
     * @return array
     */
    public function stat(){
        $bean = $this->getBean();
        $model = $this->db()->table('finance_commission_installment');
        $model->field('count(`id`) as user_qty');
        $model->field('sum(`balance`) as total_balance');
        $model->field('sum(`balance_lock`) as total_balance_lock');
        $model->field('sum(`credit`) as total_credit');
        $model->field('`type`');
        $model->field('uid');
        $model->groupBy(['uid','type']);
        $result = $model->multi();
        $commissionTypeMap = (new CommissionType())->getKV();
        $return = array();
        foreach($commissionTypeMap as $ct){
            if(!$bean->getType() || in_array($ct['key'],(array)$bean->getType())){
                foreach($this->getRoleMapWithName() as $rk=>$rv){
                    $ct['value'][1] = str_replace($rk,$rv,$ct['value'][1]);
                }
                $return[$ct['key']] = array(
                    'label'=>$ct['value'][1],
                    'data'=>array(
                        'total_qty'=>0,
                        'user_qty'=>0,
                        'users'=>array(),
                        'total_balance'=>0,
                        'total_balance_lock'=>0,
                        'total_credit'=>0,
                    ),
                );
                foreach($result as $v){
                    if($v['type']==$ct['key']){
                        $return[$ct['key']]['data']['total_qty'] += $v['user_qty'];
                        $return[$ct['key']]['data']['total_balance'] += $v['total_balance'];
                        $return[$ct['key']]['data']['total_balance_lock'] += $v['total_balance_lock'];
                        $return[$ct['key']]['data']['total_credit'] += $v['total_credit'];
                        if(!in_array($v['uid'],$return[$ct['key']]['data']['users'])){
                            $return[$ct['key']]['data']['user_qty'] += 1;
                            $return[$ct['key']]['data']['users'][] = $v['uid'];
                        }
                    }
                }
            }
        }
        return $return;
    }

    /**
     * @param CommissionInstallmentBean $bean
     * @return bool|mixed
     */
    public function add__(CommissionInstallmentBean $bean){
        if(!$bean->getType())   return $this->false('参数错误T');
        if(!$bean->getUid())    return $this->false('参数错误U');
        $userInfo = $this->db()->table('user_info')

            ->join('user_info','user_base',array('uuid'=>'uuid'),'LEFT')
            ->whereTable('user_info')->equalTo('uid',$bean->getUid())
            ->one();
        if(!$bean->getRoleId()){
            $bean->setRoleId($userInfo['role_id']);
        }
        //todo 获取分佣配置
        $configs = $this->getConfigValueList(null,ConfigType::COMMISSION);
        switch($bean->getType()){
            case CommissionType::recharge_award:
                if($bean->getBalanceLock()<=0) return $this->false('金额错误');
                if(!$this->judgeConfig($configs,[
                    'commission_recharge_award_credit_standard_amount',
                    'commission_recharge_award_credit_percent',
                    'commission_recharge_award_credit_unit',
                    'commission_recharge_award_credit_unit_length',
                    'commission_recharge_award_credit_installments',
                ])) return $this->false($this->getFalseMsg());
                if($configs['commission_recharge_award_credit_unit_length']<=0) return true;
                if($configs['commission_recharge_award_credit_installments']<=0) return true;
                if($configs['commission_recharge_award_credit_percent']<=0){
                    return true;
                }
                //金额不达标
                if($bean->getBalanceLock() < $configs['commission_recharge_award_credit_standard_amount']){
                    return true;
                }
                $bean->setBaseBalance(0);
                $bean->setBaseBalanceLock(0);
                $bean->setBaseCredit($bean->getBalanceLock());
                $bean->setBasePercentBalance(0);
                $bean->setBasePercentBalanceLock(0);
                $bean->setBasePercentCredit($configs['commission_recharge_award_credit_percent']);
                $bean->setStartNumberOfInstallments(0);
                $bean->setNumberOfInstallments($configs['commission_recharge_award_credit_installments']);
                $bean->setInstallmentsUnit($configs['commission_recharge_award_credit_unit']);
                $bean->setInstallmentsUnitLength($configs['commission_recharge_award_credit_unit_length']);
                break;
            default:
                return $this->error('Commission-type:参数错误');
                break;
        }
        if($bean->getNumberOfInstallments()<1) return true;
        if($bean->getInstallmentsUnitLength()<=0) return true;
        if($bean->getStartNumberOfInstallments()<0){
            return $bean->setStartNumberOfInstallments(0);
        }
        if($bean->getStartNumberOfInstallments()>=$bean->getNumberOfInstallments()){
            return $this->error('初始期不得大于等于总期数');
        }
        if(!$bean->getInstallmentsUnit()) return $this->error('分期时间单位错误');

        $cacheDayTime = date('Y-m-d 23:59:59',time()+86400*($configs['commission_cache_day']));
        if($bean->getStartNumberOfInstallments()>0){
            $estimatedTime = $this->getNowDateTime();
        }else{
            $estimatedTime = date('Y-m-d H:i:s',strtotime(getNowDateTime()."+{$bean->getInstallmentsUnitLength()} {$bean->getInstallmentsUnit()}"));
        }
        if(strtotime($estimatedTime)<strtotime($cacheDayTime)){
            $estimatedTime = $cacheDayTime;
        }
        //设定分佣价值
        $bean->setBalance(($bean->getBaseBalance()*$bean->getBasePercentBalance()*0.01)/$bean->getNumberOfInstallments());
        $bean->setBalanceLock(($bean->getBaseBalanceLock()*$bean->getBasePercentBalanceLock()*0.01)/$bean->getNumberOfInstallments());
        $bean->setCredit(($bean->getBaseCredit()*$bean->getBasePercentCredit()*0.01)/$bean->getNumberOfInstallments());

        $CommissionTypes = (new CommissionType());
        $commissionData = array();
        $commissionData['create_time'] = $bean->getCreateTime() ? $bean->getCreateTime() : $this->getNowDateTime();
        $commissionData['estimated_time'] = $estimatedTime;
        $commissionData['is_enable'] = ($bean->getIsEnable()) ? $bean->getIsEnable() : IsEnable::yes;
        $commissionData['is_over'] = IsSure::no;
        $commissionData['uid'] = $bean->getUid();
        $commissionData['type'] = $bean->getType();
        $commissionData['description'] = $bean->getDescription() ?: $CommissionTypes->get($bean->getType());
        $commissionData['balance'] = $bean->getBalance();
        $commissionData['shopping_ticket'] = $bean->getBalanceLock();
        $commissionData['credit_gold'] = $bean->getCredit();
        $commissionData['base_balance'] = $bean->getBaseBalance();
        $commissionData['base_balance_lock'] = $bean->getBaseBalanceLock();
        $commissionData['base_credit'] = $bean->getBaseCredit();
        $commissionData['base_percent_balance'] = $bean->getBasePercentBalance();
        $commissionData['base_percent_balance_lock'] = $bean->getBasePercentBalanceLock();
        $commissionData['base_percent_credit'] = $bean->getBasePercentCredit();
        $commissionData['start_number_of_installments'] = $bean->getStartNumberOfInstallments() ?: 0;
        $commissionData['current_number_of_installments'] = 0;
        $commissionData['number_of_installments'] = $bean->getNumberOfInstallments();
        $commissionData['installments_unit'] = $bean->getInstallmentsUnit();
        $commissionData['installments_unit_length'] = $bean->getInstallmentsUnitLength();
        ($bean->getOrderNo())   && $commissionData['order_no'] = $bean->getOrderNo();
        ($bean->getData())      && $commissionData['data'] = json_encode($bean->getData());
        ($bean->getFromUid())   && $commissionData['from_uid'] = $bean->getFromUid();
        try{
            if(!$this->db()->table('finance_commission_installment')->insert($commissionData)){
                throw new \Exception($this->db()->getError());
            }
            $id = $this->db()->lastInsertId();
        }catch (\Exception $e){
            return $this->false($e->getMessage());
        }
        return $id;
    }

    public function add(){
        return $this->add__($this->getBean());
    }

    /**
     * @return array
     */
    public function changeStatus(){
        $bean = $this->getBean();
        if(!$bean->getId())  return $this->error('参数错误');
        if(!$bean->getUid()) return $this->error('参数错误U');
        if(!$bean->getIsEnable()) return $this->error('参数错误IE');
        try{
            $this->db()->table('finance_commission_installment')->in('id',$bean->getId())->update(array('is_enable'=>$bean->getIsEnable()));
        }catch (\Exception $e){
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 设置所有有效
     * @param $uid
     * @return array
     */
    public function setAllEnable($uid){
        if(!$uid) return $this->success();
        try{
            $this->db()->table('finance_commission_installment')
                ->equalTo('uid',$uid)
                ->equalTo('is_enable',IsEnable::no)
                ->update(array('is_enable'=>IsEnable::yes));
        }catch(\Exception $e){
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 设置所有无效
     * @param $uid
     * @return array
     */
    public function setAllDisable($uid){
        if(!$uid) return $this->success();
        try{
            $this->db()->table('finance_commission_installment')
                ->where(array('uid'=>$uid,'is_enable'=>IsEnable::yes))
                ->update(array('is_enable'=>IsEnable::no));
        }catch(\Exception $e){
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 设置所有删除
     * @param $uid
     * @return array
     */
    public function setAllDelete($uid){
        if(!$uid) return $this->success();
        try{
            $this->db()->table('finance_commission_installment')->equalTo('uid',$uid)->update(array('is_enable'=>IsEnable::del));
        }catch(\Exception $e){
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    public function divide(CommissionInstallmentBean $bean){
        //todo 查出分佣数据
        $bean->setIsOver(IsSure::no);
        $bean->setIsEnable(IsEnable::yes);
        $commissionList = $this->db()->table('finance_commission_installment')
            ->lessThanOrEqualTo('estimated_time',getNowDateTime())
            ->limit(100)->multi();
        $resultBox = true;
        if($commissionList){
            $now = $this->getNowDateTime();
            $resultBox = array();
            foreach($commissionList as $v){
                $this->db()->beginTrans();
                try{
                    //print_r($v);
                    //#如果期数数据有误，修复
                    if($v['current_number_of_installments']>=$v['number_of_installments']){
                        $this->db()->table('finance_commission_installment')->update(
                            array(
                                'is_over'=>IsSure::yes,
                                'current_number_of_installments'=>$v['number_of_installments'],
                            ),
                            array('id'=>$v['id'])
                        );
                    }
                    //正经分佣
                    else{
                        //todo
                        //计算当次
                        $numeric = array('balance','shopping_ticket','credit_gold','credit_silver');
                        $data = array(
                            'uid' => $v['uid'],
                            'type' => null,
                        );
                        //分析类型
                        switch($v['type']){
                            case CommissionType::recharge_award:
                                $data['type'] = WalletType::COMMISSION_RECHARGE_AWARD;
                                break;
                            default:
                                throw new \Exception('分佣类型不允许分佣');
                                break;
                        }
                        //初始化
                        foreach($numeric as $n){
                            $data[$n] = 0;
                        }
                        $installments = 1;
                        $start_number_of_installments = $v['start_number_of_installments'];
                        $current_number_of_installments = $v['current_number_of_installments'];
                        if($current_number_of_installments<$start_number_of_installments){
                            $installments = $start_number_of_installments - $current_number_of_installments;
                            $current_number_of_installments = $start_number_of_installments-1;
                        }
                        $number_of_installments = $v['number_of_installments'];
                        $installments_unit = $v['installments_unit'];
                        $installments_unit_length = $v['installments_unit_length'];
                        if($installments_unit_length<=0){
                            throw new \Exception('分佣时间间隔错误');
                        }
                        if(!in_array($installments_unit,[
                            DateTimeUnit::year,
                            DateTimeUnit::month,
                            DateTimeUnit::week,
                            DateTimeUnit::day,
                            DateTimeUnit::minute,
                        ])){
                            throw new \Exception('分佣时间单位错误');
                        }
                        if($current_number_of_installments==$number_of_installments-1){
                            //由于最后一期有时会有小数点残留，所以重新算一次，剩余分佣
                            $installments--;
                            foreach($numeric as $n){
                                $data[$n] = round(($v["base_{$n}"]*$v["base_percent_{$n}"]*0.01)-($v[$n]*$current_number_of_installments),5);
                            }
                        }
                        if($installments>0){
                            foreach($numeric as $n){
                                $data[$n] += $v[$n] * $installments;
                            }
                        }
                        //修改分佣信息(期数，完结态，时间等)
                        //TODO 注意！estimated_time是预计下次分佣时间，系统默认有N天的分佣前期禁分期。但在通过禁用后，本身应该分佣的记录，应该在原来未禁用的时间点分出
                        $current_number_of_installments = $current_number_of_installments + 1;
                        $estimated_time = date('Y-m-d H:i:s',strtotime($v['create_time'].' +'
                            .(($current_number_of_installments-$start_number_of_installments+1)*$installments_unit_length)
                            ." {$installments_unit}")
                        );
                        $isOver = ($current_number_of_installments>=$number_of_installments) ? IsSure::yes : IsSure::no;
                        $this->db()->table('finance_commission_installment')->update(
                            array(
                                'last_commission_time' => $now,
                                'estimated_time' => $estimated_time,
                                'is_over' => $isOver,
                                'current_number_of_installments' => $current_number_of_installments,
                            ),
                            array('id'=>$v['id'])
                        );
                        //分佣吧
                        //todo 修改钱包
                        $WalletModel = (new WalletModel($this->getIO()));
                        $WalletModel->setUid($v['uid']);
                        $walletBean = (new WalletBean());
                        $walletBean->setType($data['type']);
                        $walletBean->setBalance($data['balance']);
                        $walletBean->setBalanceLock($data['balance_lock']);
                        $walletBean->setCredit($data['credit']);
                        $walletBean->setData($v);
                        if(!$WalletModel->gateWay__($walletBean)){
                            throw new \Exception($WalletModel->getFalseMsg());
                        }
                    }
                }catch (\Exception $e){
                    $this->db()->rollBackTrans();
                    $resultBox[$v['id']] = $v;
                    $resultBox[$v['id']]['action_result'] = false;
                    $resultBox[$v['id']]['action_error'] = $e->getMessage();
                    continue;
                }
                $this->db()->commitTrans();
                $resultBox[$v['id']] = $v;
                $resultBox[$v['id']]['action_result'] = true;
                $resultBox[$v['id']]['action_error'] = null;
            }
        }
        return $resultBox;
    }

}