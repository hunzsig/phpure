<?php
/**
 * Date: 2018/09/19
 */

namespace Finance\Model;

use Finance\Bean\BankAccountBean;

use Common\Map\IsSure;
use Finance\Map\BankAccountType;


class BankAccountModel extends AbstractModel
{

    /**
     * @return BankAccountBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * @param \library\Pgsql $model
     * @return \library\Pgsql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $bean->getId() && $model->in('id', $bean->getId());
        $bean->getUid() && $model->in('uid', $bean->getUid());
        $bean->getAccountNo() && $model->like('account_no', "%" . $bean->getAccountNo() . "%");
        $bean->getAccountHolder() && $model->like('account_holder', "%" . $bean->getAccountHolder() . "%");
        $bean->getAccountBankCode() && $model->equalTo('account_bank_code', $bean->getAccountBankCode());
        $bean->getAccountType() && $model->equalTo('account_type', $bean->getAccountType());
        $bean->getIsDefault() && $model->equalTo('is_default', $bean->getIsDefault());
        return $model;
    }

    /**
     * 设置某用户地址默认值
     * 三种情况：
     * 1）如果没有设置ID且用户已经设置过默认，则不操作
     * 2）如果没有设置ID且用户没有设置过默认且地址列表不为空，则设置第一条为默认地址
     * 3）如果有设置ID，则直接设置该ID地址为默认地址
     * @param $uid
     * @param null $id
     * @return bool
     * @throws \Exception
     */
    private function setIsDefault($uid, $id = null)
    {
        if (!$uid) throw new \Exception('设置某用户地址默认值必须uid');
        if (!$id) {
            $res = $this->db()->table('finance_bank_account')->where(array('uid' => $uid, 'is_default' => IsSure::yes))->one();
            if (!$res) {
                //如果没有找到默认地址，取该用户第一个的帐号ID
                $res = $this->db()->table('finance_bank_account')->equalTo('uid', $uid)->orderBy('id', 'asc')->one();
                $id = $res['id'];
            }
        }
        if ($id) {
            $this->db()->table('finance_bank_account')->equalTo('uid', $uid)->update(array('is_default' => IsSure::no));
            $this->db()->table('finance_bank_account')->where(array('uid' => $uid, 'id' => $id))->update(array('is_default' => IsSure::yes));
        }
        return true;
    }

    //------------------------------------------------------

    /**
     * 获取统计
     * @return array
     */
    public function getCount()
    {
        $model = $this->db()->table('finance_back_account');
        return $this->success($this->bindWhere($model)->count());
    }

    /**
     * 获取列表
     * @return array
     */
    public function getList()
    {
        $bean = $this->getBean();
        $model = $this->db()->table('finance_back_account');
        $model = $this->bindWhere($model);
        $model->orderBy('id');
        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($this->factoryData($result, function ($tempData) {
            $bankAccountTypeMap = (new BankAccountType())->getKV();
            $isSureMap = (new IsSure())->getKV();
            foreach ($tempData as $k => $v) {
                ($v['account_type']) && $tempData[$k]['account_type_label'] = $bankAccountTypeMap[$v['account_type']];
                ($v['is_default']) && $tempData[$k]['is_default_label'] = $isSureMap[$v['is_default']];
            }
        }));
    }

    /**
     * 获取信息
     * @return array
     */
    public function getInfo()
    {
        $model = $this->db()->table('finance_back_account');
        $model = $this->bindWhere($model);
        $result = $model->one();
        return $this->success($this->factoryData($result, function ($tempData) {
            $bankAccountTypeMap = (new BankAccountType())->getKV();
            $isSureMap = (new IsSure())->getKV();
            foreach ($tempData as $k => $v) {
                ($v['account_type']) && $tempData[$k]['account_type_label'] = $bankAccountTypeMap[$v['account_type']];
                ($v['is_default']) && $tempData[$k]['is_default_label'] = $isSureMap[$v['is_default']];
            }
        }));
    }

    /**
     * 新增
     * @return array
     */
    public function add()
    {
        $bean = $this->getBean();
        if (!$bean->getAuthUid()) return $this->error('用户信息不完整');
        if (!$bean->getAccountBankCode()) return $this->error('缺少银行');
        if (!$bean->getAccountHolder()) return $this->error("缺少持有人");
        if (!$bean->getAccountNo()) return $this->error('缺少帐号号码');
        if (!$bean->getAccountType()) return $this->error('缺少帐号类型');
        $table = $this->db()->table('finance_bank_account');
        $data = array();
        $data['uid'] = $bean->getAuthUid();
        $data['account_bank_code'] = $bean->getAccountBankCode();
        $data['account_holder'] = $bean->getAccountHolder();
        $data['account_no'] = $bean->getAccountNo();
        $data['account_type'] = $bean->getAccountType();
        try {
            if (!$table->insert($data)) {
                throw new \Exception($table->getError());
            }
            $id = $table->lastInsertId();
            if ((int)$bean->getIsDefault() == IsSure::yes) {
                $this->setIsDefault($bean->getAuthUid(), $id);
            } else {
                $this->setIsDefault($bean->getAuthUid());
            }
        } catch (\Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate') !== false) {
                return $this->error('不能重复添加相同帐号');
            } else return $this->error($e->getMessage());
        }
        return $this->success($id);
    }

    /**
     * 更新
     * @return array
     */
    public function edit()
    {
        $bean = $this->getBean();
        if (!$bean->getAuthUid()) return $this->error('用户信息不完整');
        if (!$bean->getId()) return $this->error('参数错误');
        $data = array();
        ($bean->getAccountBankCode()) && $data['account_bank_code'] = $bean->getAccountBankCode();
        ($bean->getAccountHolder()) && $data['account_holder'] = $bean->getAccountHolder();
        ($bean->getAccountNo()) && $data['account_no'] = $bean->getAccountNo();
        ($bean->getAccountType()) && $data['account_type'] = $bean->getAccountType();
        ($bean->getIsDefault()) && $data['is_default'] = (int)$bean->getIsDefault();
        try {
            $this->db()->table('finance_bank_account')->where(array('id' => $bean->getId(), 'uid' => $bean->getUid()))->update($data);
            if ($bean->getIsDefault() == IsSure::yes) {
                $this->setIsDefault($bean->getAuthUid(), $bean->getId());
            } else {
                $this->setIsDefault($bean->getAuthUid());
            }
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 删除
     * @return array
     */
    public function del()
    {
        $bean = $this->getBean();
        if (!$bean->getId() || !$bean->getUid()) {
            return $this->error('参数丢失');
        }
        $accountInfo = $this->db()->table('finance_bank_account')->field('uid')->equalTo('id', $bean->getId())->one();
        if (!$accountInfo || $accountInfo['uid'] != $bean->getUid()) {
            return $this->error('这个帐号不属于你');
        }
        try {
            $this->db()->table('finance_bank_account')->equalTo('id', $bean->getId())->equalTo('uid', $bean->getUid())->delete();
            $this->setIsDefault($bean->getUid());
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

}