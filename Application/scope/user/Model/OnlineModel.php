<?php

namespace User\Model;

use External\Bean\WxmpBean;
use External\Model\WxmpModel;
use User\Bean\OnlineBean;
use User\Map\Status;

class OnlineModel extends AbstractModel
{

    const ONLINE_KEEP_TIME = 60 * 60 * 24 * 30; //在线 - 30天不活动视为离线
    const ONLINE_FIELD = 'uid,role_id,status,login_name,avatar';

    /**
     * @return OnlineBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * @param \library\Mysql $model
     * @return \library\Mysql
     */
    protected function bindOnlineWhere($model)
    {
        $bean = $this->getBean();
        $bean->getPlatform() && $model->equalTo('platform', $bean->getPlatform());
        $bean->getUid() && $model->equalTo('uid', $bean->getUid());
        return $model;
    }

    /**
     * 登录记录
     * @param $userInfo
     * @return bool
     */
    protected function loginRecord($userInfo)
    {
        if (!$userInfo['user_uid']) {
            return $this->false('登录记录参数不全');
        }
        try {
            $loginExpiredTime = date('Y-m-d H:i:s', $this->getNow() + self::ONLINE_KEEP_TIME);
            //更新基本帐号表
            $this->db()->table('user')->equalTo('uid', $userInfo['user_uid'])->update(array('latest_login_time' => $this->db()->now()));
            //插入登录在线表
            $data = array();
            $data['client_id'] = $this->getClientID();
            $data['uid'] = $userInfo['user_uid'];
            $data['platform'] = $this->getPlatform();
            $data['ip'] = $this->getClientIP();
            $data['login_time'] = $this->db()->now();
            $data['expire_time'] = $loginExpiredTime;
            $req = array(
                'client_id' => $this->getClientID(),
                'platform' => $this->getPlatform(),
            );
            if (!$this->db()->table('user_login_online')->where($req)->one()) {
                $this->db()->table('user_login_online')->insert($data);
            } else {
                $this->db()->table('user_login_online')->where($req)->update($data);
            }
            //todo 插入登录累计记录表
            $data = array();
            $data['create_time'] = $this->db()->now();
            $data['uid'] = $userInfo['user_uid'];
            $data['ip'] = $this->getClientIP();
            $data['platform'] = $this->getPlatform();
            $this->db()->table('user_login_record')->insert($data);
            //todo cache
            $cacheOnlineData = $this->redis()->get("ONLINE");
            if(!$cacheOnlineData) $cacheOnlineData = array();
            if(!isset($cacheOnlineData[$this->getPlatform()])) $cacheOnlineData[$this->getPlatform()] = array();
            $cacheOnlineData[$this->getPlatform()][$this->getClientID()][$userInfo['user_uid']] =$this->getNow() + self::ONLINE_KEEP_TIME;
            $this->redis()->set("ONLINE",$cacheOnlineData);
            foreach ($cacheOnlineData[$this->getPlatform()] as $clientID => $clients) {
                foreach ($clients as $cpk => $expire) {
                    if ($this->getNow() >= $expire) {
                        unset($cacheOnlineData[$this->getPlatform()][$clientID][$cpk]);
                    }
                }
                if(!$cacheOnlineData[$this->getPlatform()][$clientID]){
                    unset($cacheOnlineData[$this->getPlatform()][$clientID]);
                }
            }
            $this->redis()->set("ONLINE", $cacheOnlineData);

        } catch (\Exception $e) {
            return $this->false($e->getMessage());
        }
        return true;
    }

    /**
     * 获取列表
     * @return array
     */
    public function getOnlineList()
    {
        $bean = $this->getBean();
        $model = $this->db()->table('user_login_online');
        $model = $this->bindOnlineWhere($model);
        $model->limit($bean->getLimit());
        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($result);
    }

    /**
     * 根据ID获取信息
     * @return array
     */
    public function getOnlineInfo()
    {
        $model = $this->db()->table('user_login_online');
        $model = $this->bindOnlineWhere($model);
        $result = $model->one();
        return $this->success($result ? $result : array());
    }

    /**
     * 获取在线人数
     * @return array
     */
    public function getOnlineQty()
    {
        $qty = 0;
        try{
            $cacheOnlineData = $this->redis()->get("ONLINE");
            if($cacheOnlineData){
                foreach ($cacheOnlineData as $platform => $v){
                    if(!$this->getBean()->getPlatform() || $this->getBean()->getPlatform() === $platform){
                        $qty += count($v);
                    }
                }
            }
        }catch (\Exception $e){
            $model = $this->db()->table('user_login_online');
            $qty = $this->bindOnlineWhere($model)->count();
        }
        return $this->success($qty);
    }

    /**
     * 是否在线,需要UID
     * !需要验证请求的IP地址
     * @return array
     */
    public function isOnline()
    {
        $bean = $this->getBean();
        if (!$bean->getUid()) {
            if (!$bean->getAccount()) {
                return $this->error('参数错误');
            }
            $info = $this->getInfoByAccount($bean->getAccount());
            if (!$info) {
                return $this->error('账号不存在');
            }
            $bean->setUid($info['user_uid']);
        }
        $isOnline = false;
        try{
            $cacheOnlineData = $this->redis()->get("ONLINE");
            if($cacheOnlineData
                && isset($cacheOnlineData[$this->getPlatform()])
                && isset($cacheOnlineData[$this->getPlatform()][$this->getClientID()])){
                if(isset($cacheOnlineData[$this->getPlatform()][$this->getClientID()][$bean->getUid()])){
                    if($cacheOnlineData[$this->getPlatform()][$this->getClientID()][$bean->getUid()] > $this->getNow()){
                        $isOnline = true;
                        $cacheOnlineData[$this->getPlatform()][$this->getClientID()][$bean->getUid()] = $this->getNow();
                        $this->redis()->set("ONLINE", $cacheOnlineData);
                    }
                }
            }
        } catch (\Exception $e) {}
        if($isOnline === false){
            try {
                $now = $this->getNowDateTime();
                $loginExpiredTime = date('Y-m-d H:i:s', time() + self::ONLINE_KEEP_TIME);
                $this->db()->table('user_login_online')->lessThan('expire_time', $now)->delete();

                $model = $this->db()->table('user_login_online');
                $model->equalTo('client_id', $this->getClientID());
                $model->equalTo('platform', $this->getPlatform());
                $model->greaterThanOrEqualTo('expire_time', $now);
                $model->equalTo('uid', $bean->getUid());
                $data = $model->field('client_id,uid')->one();
                if ($data) {
                    $isOnline = true;
                    //todo 刷新帐号登录周期
                    $this->db()->table('user_login_online')
                        ->where(array('client_id' => $data['user_login_online_client_id'], 'uid' => $data['user_login_online_uid']))
                        ->update(array(
                            'ip' => $this->getClientIP(),
                            'active_time' => $this->db()->now(),
                            'expire_time' => $loginExpiredTime
                        ));
                }
            } catch (\Exception $e) {
                return $this->error($e->getMessage());
            }
        }
        return $this->success($isOnline ? $bean->getUid() : 0);
    }

    /**
     * 一般登录
     * @return array
     */
    public function login()
    {
        $bean = $this->getBean();
        //定义变量
        $platform = $this->getPlatform();
        $account = $bean->getAccount();
        $loginPwd = $bean->getLoginPwd();
        if (!$platform || !is_string($platform)) return $this->error("未知客户端，拒绝登录");
        if (!$account) return $this->error("请填写账号");
        if (!$loginPwd) return $this->error("请填写密码");

        //todo 看看账号是否存在
        $userInfo = $this->db()->table('user')
            ->field('uid,platform,permission,status,login_name', 'user')
            ->join('user', 'user_info', array('uid' => 'uid'), 'LEFT')
            ->field('avatar', 'user_info')
            ->whereTable('user')
            ->equalTo('login_name', $account)
            ->contains('mobile', $account)
            ->contains('email', $account)
            ->contains('wx_open_id', $account)
            ->contains('wx_unionid', $account)
            ->equalTo('identity_card_no', $account)
            ->closure('or')
            ->one();
        if (!$userInfo) {
            return $this->error('账号不存在');
        }
        //todo 检查平台
        if (!in_array($platform, $userInfo['user_platform'])) {
            return $this->error('账号不允许在此平台登录');
        }
        //todo 检查权限
        if (empty($userInfo['user_permission'])){
            return $this->error('账号无权限');
        }
        if (!in_array($platform, $userInfo['user_permission']) && !in_array($platform.'-login', $userInfo['user_permission'])) {
            return $this->error('账号无权限在此平台登录');
        }
        $userInfo['platform'] = $platform;
        //todo 检查账号状态
        switch ($userInfo['user_status']) {
            case Status::FREEZE:
                return $this->error('帐号已被冻结');
                break;
            /*
            case Status::UNVERIFY:
                return $this->error('帐号尚未进行审核，请等待审核通过');
                break;
            */
            case Status::DELETE:
                return $this->error('帐号已被注销');
                break;
            case Status::UNPASS:
                return $this->error('帐号审核不通过');
                break;
            default:
                break;
        }
        //todo 检查密码
        if (!$this->authPwdByUid($userInfo['user_uid'], $loginPwd)) {
            return $this->error($this->getFalseMsg());
        }
        //todo 记录登录信息
        if (!$this->loginRecord($userInfo)) {
            return $this->error($this->getFalseMsg());
        }
        unset($userInfo['platform']); //del platform
        return $this->success($userInfo);
    }

    /**
     * 登出,需要至少一个UID或唯一（个性）登录名
     * 需要验证请求的IP地址
     * @return array
     */
    public function logout()
    {
        $bean = $this->getBean();
        if (!$bean->getUid()) {
            return $this->error('登出参数错误');
        }
        //cache
        try{
            $cacheOnlineData = $this->redis()->get("ONLINE");
            if(!empty($cacheOnlineData[$this->getPlatform()]) && !empty($cacheOnlineData[$this->getPlatform()][$this->getClientID()])){
                foreach ($cacheOnlineData[$this->getPlatform()][$this->getClientID()] as $cpk => $expire){
                    if($cpk == $bean->getUid()){
                        unset($cacheOnlineData[$this->getPlatform()][$this->getClientID()][$cpk]);
                    }
                }
                if(!$cacheOnlineData[$this->getPlatform()][$this->getClientID()]){
                    unset($cacheOnlineData[$this->getPlatform()][$this->getClientID()]);
                }
                $this->redis()->set("ONLINE", $cacheOnlineData);
            }
        } catch (\Exception $e) {}
        //
        $model = $this->db()->table('user_login_online');
        $model->equalTo('client_id', $this->getClientID());
        $model->equalTo('uid', $bean->getUid());
        $model->equalTo('platform', $this->getPlatform());
        try {
            $model->delete();
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

}