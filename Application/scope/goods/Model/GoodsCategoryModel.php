<?php

namespace Goods\Model;

use Common\Map\IsEnable;

class GoodsCategoryModel extends AbstractModel
{

    /**
     * @return \Goods\Bean\GoodsCategoryBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * @param \library\Pgsql $model
     * @return \library\Pgsql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $bean->getId() && $model->in('id', $bean->getId());
        $bean->getPid() !== null && $model->in('pid', $bean->getPid());
        $bean->getStatus() && $model->in('status', $bean->getStatus());
        $bean->getLevel() && $model->in('level', $bean->getLevel());
        $bean->getName() && $model->like('name', "%" . $bean->getName() . "%");
        return $model;
    }

    //---------------------------------------------------------------

    /**
     * 判断分类名是否存在
     * @param $name
     * @return bool
     */
    private function isExist($name)
    {
        if (!$name) return false;
        return $this->db()->table('goods_category')->field('id')->equalTo("name", $name)->one() ? true : false;
    }

    /**
     * 获取列表
     * @return array
     */
    public function getList()
    {
        $bean = $this->getBean();
        $model = $this->db()->table('goods_category');
        if (!$bean->getOrderBy()) {
            $model
                ->orderBy('level', 'asc')
                ->orderBy('ordering', 'desc')
                ->orderBy('pid', 'asc');
        } else {
            $model->orderByStr($bean->getOrderBy());
        }
        $model = $this->bindWhere($model);
        $model->limit($bean->getLimit());
        if ($bean->getPage()) {
            $data = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $data = $model->multi();
        }
        return $this->success($this->factoryData($data, function ($tempData) {
            $isEnable = (new IsEnable())->getKV();
            foreach ($tempData as $k => $v) {
                $tempData[$k]['status_label'] = $isEnable[$v['status']];
            }
            return $tempData;
        }));
    }

    /**
     * 获取分类信息
     * @return array
     */
    public function getInfo()
    {
        $model = $this->db()->table('goods_category');
        $model = $this->bindWhere($model);
        $result = $model->one();
        return $this->success($this->factoryData($result, function ($tempData) {
            $isEnable = (new IsEnable())->getKV();
            foreach ($tempData as $k => $v) {
                $tempData[$k]['goods_category_status_label'] = $isEnable[$v['goods_category_status']];
            }
            return $tempData;
        }));
    }

    /**
     * @return array
     */
    public function getTree()
    {
        $data = $this->db()->table('goods_category')
            ->equalTo('status', IsEnable::yes)
            ->orderBy('level', 'asc')->orderBy('pid', 'asc')
            ->multi();
        function gm(&$tempData, $level = 1, $pid = 0)
        {
            $result = array();
            foreach ($tempData as $k => $v) {
                if ($level === $v['goods_category_level'] && $pid === $v['goods_category_pid']) {
                    unset($tempData[$k]);
                    $v['value'] =$v['goods_category_id'];
                    $v['label'] =$v['goods_category_name'];
                    $v['children'] = gm($tempData, $level + 1, $v['goods_category_id']);
                    $result[] = $v;
                }
            }
            return $result;
        }
        $result = gm($data);
        return $this->success($result);
    }

    /**
     * 创建分类
     * @return array
     */
    public function add()
    {
        $bean = $this->getBean();
        if (!$bean->getName()) return $this->error('缺少分类名称');
        if ($this->isExist($bean->getName())) {
            return $this->error('同名分类已经存在');
        }
        $level = 1;
        //todo 如果上级分类大于0
        if ($bean->getPid() > 0) {
            $parentInfo = $this->db()->table('goods_category')->field('level')->equalTo('id', $bean->getPid())->one();
            $level = $parentInfo['goods_category_level'] + 1;
        }
        $data = array();
        $data['pid'] = (int)$bean->getPid();
        $data['status'] = IsEnable::yes;
        $data['name'] = $bean->getName();
        $data['level'] = $level;
        ($bean->getPic()) && $data['pic'] = $bean->getPic();
        (is_numeric($bean->getOrdering())) && $data['ordering'] = (int)$bean->getOrdering();
        try {
            $id = $this->db()->table('goods_category')->insert($data);
            if (!$id) {
                throw new \Exception($this->db()->getError());
            }
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success($id);
    }

    /**
     * 修改分类
     * @return array
     */
    public function edit()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数丢失');

        $level = 1;
        //todo 如果上级分类大于0
        if ($bean->getPid() > 0) {
            $parentInfo = $this->db()->table('goods_category')->equalTo('id', $bean->getPid())->one();
            $level = $parentInfo['goods_category_level'] + 1;
        }

        $data = array();
        $data['level'] = $level;
        $data['pid'] = (int)$bean->getPid();
        ($bean->getName()) && $data['name'] = $bean->getName();
        ($bean->getPic()) && $data['pic'] = $bean->getPic();
        (is_numeric($bean->getOrdering())) && $data['ordering'] = (int)$bean->getOrdering();
        try {
            $this->db()->table('goods_category')->equalTo('id', $bean->getId())->update($data);
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 根据ID删除分类
     * @return array
     */
    public function del()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数丢失');
        if ($this->db()->table('goods_category')->field('id')->where(array('pid' => $bean->getId(), 'status' => IsEnable::yes))->one()) {
            return $this->error('请先删除子分类');
        }
        if ($this->db()->table('goods')->field('id')->equalTo('category_id', $bean->getId())->one()) {
            return $this->error('该分类下存有商品，不能删除');
        }
        $table = $this->db()->table('goods_category');
        try {
            $table->equalTo('id', $bean->getId())->delete();
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 修改状态
     * @return array
     */
    public function status()
    {
        $bean = $this->getBean();
        $id = $bean->getId();
        $status = $bean->getStatus();
        if (!$id || !$status) return $this->error('参数错误');
        try {
            $this->db()->table('goods_category')->equalTo('id', $id)->update(array('status' => $status));
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 获取第一个大分类ID
     * @return bool|mixed|null
     */
    public function getFirstTopCateId()
    {
        return $this->db()->table('goods_category')
            ->field('id')
            ->equalTo('level', 1)
            ->orderBy('ordering', 'desc')->orderBy('pid')
            ->one();
    }

}