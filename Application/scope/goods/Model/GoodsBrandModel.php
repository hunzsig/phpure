<?php

namespace Goods\Model;
/**
 * @date: 2016/09/23
 */

use Data\Helper\PinYin;

class GoodsBrandModel extends AbstractModel
{

    /**
     * @return \Goods\Bean\GoodsBrandBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * @param \library\Pgsql $model
     * @return \library\Pgsql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        ($bean->getId()) && $model->in('id', $bean->getId());
        ($bean->getName()) && $model->like('name', "%" . $bean->getName() . "%");
        ($bean->getNameEng()) && $model->like('name_eng', "%" . $bean->getNameEng() . "%");
        ($bean->getCountry()) && $model->like('country', "%" . $bean->getCountry() . "%");
        return $model;
    }

    //----------------------------------------------------------------

    /**
     * 获取
     * @return array
     */
    public function getList()
    {
        $bean = $this->getBean();
        $model = $this->db()->table('goods_brand');
        $model = $this->bindWhere($model);
        $model->orderBy('name', 'asc');
        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($result);
    }

    /**
     * 获取列表 - 根据字母排序
     * @return array
     */
    public function getListGroupByLetter()
    {
        $model = $this->db()->table('goods_brand');
        $model = $this->bindWhere($model);
        $model->orderBy('name', 'asc');
        $result = $model->multi();
        $letterModel = (new PinYin());
        foreach ($result as $k => $v) {
            $firstLetter = mb_substr($v['name'], 0, 1, 'utf-8');
            $letterFirstUpper = $letterModel->getFirstUpper($firstLetter);
            $result[$k]['brand_first_letter'] = $letterFirstUpper ?: strtoupper($firstLetter);
        }
        $newList = array();
        foreach ($result as $k => $v) {
            if (!is_array($newList[$v['brand_first_letter']])) {
                $newList[$v['brand_first_letter']] = array();
            }
            $newList[$v['brand_first_letter']][] = $v;
        }
        ksort($newList);
        return $this->success($newList);
    }

    /**
     * @return array
     */
    public function getTree()
    {
        $data = $this->db()->table('goods_brand')
            ->orderBy('name', 'asc')->orderBy('name_eng', 'asc')
            ->multi();
        $result = array();
        foreach ($data as $k => $v) {
            $v['value'] = $v['goods_brand_id'];
            $v['label'] = $v['goods_brand_name'].($v['goods_brand_name_eng'] ? "({$v['goods_brand_name_eng']})" : '');
            $result[] = $v;
        }
        return $this->success($result);
    }

    /**
     * 取一条
     * @return array
     */
    public function getInfo()
    {
        $model = $this->db()->table('goods_brand');
        $model = $this->bindWhere($model);
        $result = $model->one();
        return $result;
    }

    /**
     * 添加
     * @return array
     */
    public function add()
    {
        $bean = $this->getBean();
        if (!$bean->getName()) return $this->error('请填写品牌名称');
        $data = array();
        $data['name'] = $bean->getName();
        ($bean->getNameEng()) && $data['name_eng'] = $bean->getNameEng();
        ($bean->getCountry()) && $data['country'] = $bean->getCountry();
        ($bean->getPic()) && $data['pic'] = $bean->getPic();
        try {
            if (!$this->db()->table('goods_brand')->insert($data)) {
                throw new \Exception($this->db()->getError());
            }
            $id = $this->db()->lastInsertId();
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success($id);
    }

    /**
     * 编辑
     * @return array
     */
    public function edit()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数丢失');
        $data = array();
        ($bean->getName()) && $data['name'] = $bean->getName();
        ($bean->getNameEng() !== null) && $data['name_eng'] = $bean->getNameEng();
        ($bean->getCountry() !== null) && $data['country'] = $bean->getCountry();
        ($bean->getPic() !== null) && $data['pic'] = $bean->getPic();
        try {
            $this->db()->table('goods_brand')->equalTo('id', $bean->getId())->update($data);
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 删除
     * @return array
     */
    public function del()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数丢失');
        $one = $this->db()->table('goods')->equalTo('brand_id', $bean->getId())->one();
        if ($one) return $this->error('存在使用此品牌的商品，无法删除！');
        try {
            $this->db()->table('goods_brand')->equalTo('id', $bean->getId())->delete();
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

}