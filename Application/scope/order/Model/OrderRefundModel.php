<?php

namespace Order\Model;

use Finance\Bean\WalletBean;
use Finance\Map\WalletType;
use Finance\Model\WalletModel;
use Order\Bean\OrderRefundBean;
use Order\Map\OrderRefundStatus;
use Order\Map\OrderRefundType;
use Order\Map\OrderStatus;

class OrderRefundModel extends AbstractModel
{

    const ORDER_AUTO_CANCEL_SEC = 24 * 60 * 60; //N分钟不支付自动作废

    /**
     * @return OrderRefundBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取连表视图
     * @return \library\Pgsql
     */
    protected function getViewModel()
    {
        return $this->db()->table('order_refund')
            ->join('order_refund', 'order_items as items', array('refund_order_item_id' => 'id'), 'INNER')
            ->join('order_refund', 'user_info as info', array('uid' => 'uid'), 'LEFT')
            ->join('info', 'user_base as base', array('uuid' => 'uuid'), 'LEFT')
            ->field('*', 'order_refund')
            ->field('item_name,item_data', 'items')
            ->field('avatar', 'info')
            ->field('mobile', 'base');
    }

    /**
     * @param \library\Pgsql $model
     * @return \library\Pgsql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $model->whereTable('order_refund');
        $bean->getId() && $model->in('id', $bean->getId());
        $bean->getUid() && $model->in('uid', $bean->getUid());
        $bean->getFromOrderId() && $model->equalTo('from_order_id', $bean->getFromOrderId());
        $bean->getRefundOrderType() && $model->equalTo('refund_order_type', $bean->getRefundOrderType());
        $bean->getRefundOrderStatus() && $model->in('refund_order_status', $bean->getRefundOrderStatus());
        $bean->getRefundOrderItemId() && $model->equalTo('refund_order_item_id', $bean->getRefundOrderItemId());
        $bean->getFromOrderNo() && $model->like('from_order_no', "%" . $bean->getFromOrderNo() . "%");
        $bean->getSentExpressNo() && $model->like('sent_express_no', "%" . $bean->getSentExpressNo() . "%");
        $bean->getSentExpressCode() && $model->like('sent_express_code', "%" . $bean->getSentExpressCode() . "%");
        $bean->getRefundOrderNo() && $model->like('refund_order_no', "%" . $bean->getRefundOrderNo() . "%");
        $bean->getRefundOrderName() && $model->like('refund_order_name', "%" . $bean->getRefundOrderName() . "%");
        $model->whereTable('items');
        $bean->getItemName() && $model->like('item_name', "%" . $bean->getItemName() . "%");
        $model->whereTable('base');
        $bean->getMobile() && $model->like('mobile', "%" . $bean->getMobile() . "%");
        $model->whereTable(null);
        return $model;
    }

    private $logModel = null;
    private function getLogModel()
    {
        if (!$this->logModel) $this->logModel = (new RefundLogModel($this->getIO()));
        return $this->logModel;
    }

    /**
     * 创建一个退款单号
     * @return string
     */
    private function createOrderNo()
    {
        $time = explode(' ', microtime());
        $no = 'R' . date('YmdHis') . str_replace('0.', '', $time[0]) . randCharNum(2);
        return $no;
    }


    /**
     * @param null $data
     * @param string $response
     * @return array
     */
    protected function success($data = null, $response = 'success')
    {
        if (!is_array($data)) {
            return parent::success($data, $response);
        }
        return parent::success($this->factoryData($data, function ($tempData) {
            //找出快递
            $express = array();
            if ($tempData) {
                $expressCodes = array();
                foreach ($tempData as $v) {
                    if (!in_array($v['sent_express_code'], $expressCodes)) $expressCodes[] = $v['sent_express_code'];
                    if (!in_array($v['sent_back_express_code'], $expressCodes)) $expressCodes[] = $v['sent_back_express_code'];
                }
                $expressList = $this->db()->table('data_express')->field('name,code')->in('code', $expressCodes)->multi();
                foreach ($expressList as $v) {
                    $express[$v['code']] = $v['name'];
                }
            }
            $orderRefundTypeMap = (new OrderRefundType())->getKV();
            $orderRefundStatusMap = (new OrderRefundStatus())->getKV();
            foreach ($tempData as $k => $v) {
                ($v['refund_order_type']) && $tempData[$k]['refund_order_type_label'] = $orderRefundTypeMap[$v['refund_order_type']];
                ($v['refund_order_status']) && $tempData[$k]['refund_order_status_label'] = $orderRefundStatusMap[$v['refund_order_status']];
                ($v['item_data']) && $tempData[$k]['item_data'] = json_decode($v['item_data'], true);
                if ($express) {
                    ($v['sent_express_code']) && $tempData[$k]['sent_express_name'] = $express[$v['sent_express_code']];
                    ($v['sent_back_express_code']) && $tempData[$k]['sent_back_express_name'] = $express[$v['sent_back_express_code']];
                }
            }
            return $tempData;
        }), $response);
    }


    /**
     * 获取列表
     * @return array
     */
    public function getList()
    {

        //自动取消过期退款单
        $this->systemCancel();

        $bean = $this->getBean();

        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        $model->orderBy('apply_time', 'desc', 'order_refund');
        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($result);
    }

    /**
     * @return array
     */
    public function getInfo()
    {

        //自动取消过期退款单
        $this->systemCancel();

        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        $result = $model->one();
        return $this->success($result);
    }

    /**
     * 获取订单统计信息
     * @return array
     */
    public function stat()
    {
        $bean = $this->getBean();
        $Field = 'SUM(`total_amount`) as total_amount,SUM(`total_qty`) as total_qty';
        $stat = array();
        $orderRefundTypeMap = (new OrderRefundType())->getKV();
        $orderRefundStatusMap = (new OrderRefundStatus())->getKV();
        array_push($orderRefundTypeMap, array('0', '全部'));
        array_push($orderRefundStatusMap, array('0', '全部'));
        foreach ($orderRefundTypeMap as $ok => $ov) {
            $temp = array(
                'refund_order_type' => $ok,
                'refund_order_type_label' => $ov,
                'list' => array()
            );
            foreach ($orderRefundStatusMap as $pk => $pv) {
                $model = $this->db()->table('order_refund');
                $bean->getApplyTime() && $model->greaterThanOrEqualTo('apply_time', $bean->getApplyTime());
                $bean->getApplyTime() && $model->lessThanOrEqualTo('apply_time', $bean->getApplyTime());
                $ok && $model->equalTo('refund_order_type', $ok);
                $pk && $model->equalTo('refund_order_status', $pk);
                $result = $model->field($Field)->one();
                $result = parseReal($result);
                $temp['list'][] = array(
                    'refund_order_status' => $pk,
                    'refund_order_status_label' => $pv,
                    'stat' => $result,
                );
            }
            $stat[] = $temp;
        }
        return $this->success($stat);
    }

    /**
     * 申请
     * @return array
     */
    public function apply()
    {

        //自动取消过期退款单
        $this->systemCancel();

        $bean = $this->getBean();

        if (!$bean->getUid()) return $this->error('参数错误');
        if (!$bean->getRefundOrderType()) return $this->error('类型错误');
        if (!$bean->getRefundOrderItemId()) return $this->error('请选择商品');
        if ($bean->getTotalQty() <= 0) return $this->error('请选择数量');

        $one = $this->db()->table('order_items')
            ->field('order_id,item_amount,item_qty,refund_qty,item_name')
            ->where(array('id' => $bean->getRefundOrderItemId()))
            ->one();
        if (!$one) return $this->error('错误的订单商品');
        $order = $this->db()->table('order')
            ->field('order_no,order_status,create_time')
            ->where(array('id' => $one['order_id']))
            ->one();
        $one['order_no'] = $order['order_no'];
        if (!$one['order_no']) {
            return $this->error('订单错误');
        }
        if ($bean->getRefundOrderType() == OrderRefundType::REIMBURSE) {
            if (!in_array($order['order_status'], [OrderStatus::PAYED])) {
                return $this->error('不在允许退款状态');
            }
        }
        if ($bean->getRefundOrderType() == OrderRefundType::REJECT) {
            if (!in_array($order['order_status'], [OrderStatus::RECEIVED, OrderStatus::FINISH])) {
                return $this->error('不在允许退货状态');
            }
        }
        if ($bean->getRefundOrderType() == OrderRefundType::REPLACE) {
            if (!in_array($order['order_status'], [OrderStatus::FINISH])) {
                return $this->error('不在允许换货状态');
            }
        }
        if ($bean->getRefundOrderType() == OrderRefundType::REPAIR) {
            if (!in_array($order['order_status'], [OrderStatus::FINISH])) {
                return $this->error('不在允许维修状态');
            }
        }
        if (time() > strtotime($order['create_time'] . '+1 month')) {
            return $this->error('已超过可换货期');
        }
        if (intval($bean->getTotalQty() + $one['refund_qty']) > intval($one['item_qty'])) {
            return $this->error('数量错误');
        }

        //事务开始
        $this->db()->beginTrans();
        try {
            //todo 插入退款单
            $data = array();
            $data['uid'] = $bean->getUid();
            $data['total_qty'] = (int)$bean->getTotalQty();
            $data['total_amount'] = round($data['total_qty'] * $one['item_amount'], 2);
            $data['from_order_id'] = $one['order_id'];
            $data['from_order_no'] = $one['order_no'];
            $data['refund_order_item_id'] = $bean->getRefundOrderItemId();
            $data['refund_order_no'] = $this->createOrderNo();
            $data['refund_order_type'] = $bean->getRefundOrderType();
            $data['refund_order_status'] = OrderRefundStatus::REFUND_APPLY;
            $data['apply_time'] = $this->getNowDateTime();
            switch ($bean->getRefundOrderType()) {
                case OrderRefundType::REIMBURSE:
                    $refund_order_name = '退款单';
                    $refund_order_desc = '退款[' . $one['item_name'] . ']共' . $data['total_qty'] . '件，涉及金额' . $data['total_amount'] . '元';
                    break;
                case OrderRefundType::REJECT:
                    $data['refund_order_type'] = OrderRefundType::REJECT;
                    $refund_order_name = '退货单';
                    $refund_order_desc = '退货[' . $one['item_name'] . ']共' . $data['total_qty'] . '件，涉及金额' . $data['total_amount'] . '元，需寄回货';
                    break;
                case OrderRefundType::REPLACE:
                    $data['refund_order_type'] = OrderRefundType::REPLACE;
                    $refund_order_name = '换货单';
                    $refund_order_desc = '换货[' . $one['item_name'] . ']共' . $data['total_qty'] . '件，涉及金额' . $data['total_amount'] . '元，需寄回货';
                    break;
                case OrderRefundType::REPAIR:
                    $data['refund_order_type'] = OrderRefundType::REPAIR;
                    $refund_order_name = '维修单';
                    $refund_order_desc = '维修[' . $one['item_name'] . ']共' . $data['total_qty'] . '件，涉及金额' . $data['total_amount'] . '元，需寄回货';
                    break;
                default:
                    throw new \Exception('类型错误');
            }
            $data['refund_order_name'] = $refund_order_name;
            $data['refund_order_desc'] = $refund_order_desc;
            $bean->getApplyRemark() && $data['apply_remark'] = $bean->getApplyRemark();
            $bean->getReplaceOrRepairRemark() && $data['replace_or_repair_remark'] = $bean->getReplaceOrRepairRemark();
            if (!$this->db()->table('order_refund')->insert($data)) {
                throw new \Exception($this->db()->getError());
            }
            $id = $this->db()->lastInsertId();
            //记录下已经退过的数量
            $this->db()->table('order_items')
                ->where(array('id' => $data['refund_order_item_id']))
                ->update(array('refund_qty' => $one['refund_qty'] + $data['total_qty']));
            //todo 写个日志
            if (!$this->getLogModel()->recordApply($id, $bean->getAuthUid(), $data)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success($data);
    }

    public function cancel()
    {

        //自动取消过期退款单
        $this->systemCancel();

        $bean = $this->getBean();

        if (!$bean->getId()) return $this->error('参数错误');

        $one = $this->db()->table('order_refund')
            ->field('id,refund_order_no,refund_order_item_id,total_qty')
            ->equalTo('id', $bean->getId())
            ->equalTo('refund_order_status', OrderRefundStatus::REFUND_APPLY)
            ->one();
        if (!$one) return $this->error('退款单状态错误或已被取消');

        $this->db()->beginTrans();
        try {
            //修改状态
            $data = array();
            $data['refund_order_status'] = OrderRefundStatus::CANCELED;
            $data['cancel_time'] = $this->getNowDateTime();
            $this->db()->table('order_refund')->where(array('id' => $bean->getId()))->update($data);
            //修改退款数量
            $this->db()->table('order_items')
                ->where(array('id' => $one['refund_order_item_id']))
                ->update(array('refund_qty', array('exp', "`refund_qty`-{$one['total_qty']}")));
            //插入日志
            if (!$this->getLogModel()->recordCancel($one['id'], $bean->getAuthUid(), null)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    public function systemCancel()
    {
        $orders = $this->db()->table('order_refund')
            ->field('id,refund_order_no,refund_order_item_id,total_qty')
            ->equalTo('refund_order_status', OrderRefundStatus::REFUND_APPLY)
            ->lessThan('apply_time', date('Y-m-d H:i:s', time() - self::ORDER_AUTO_CANCEL_SEC))
            ->multi();
        if (!$orders || count($orders) == 0) return true;
        $orderIds = array();
        foreach ($orders as $o) {
            if ($o['id']) $orderIds[] = $o['id'];
        }
        $this->db()->beginTrans();
        try {
            //修改状态
            $data = array();
            $data['refund_order_status'] = OrderRefundStatus::AUTO_CANCEL;
            $data['auto_cancel_time'] = $this->getNowDateTime();
            $this->db()->table('order_refund')->in('id', $orderIds)->update($data);
            //修改退款数量
            foreach ($orders as $o) {
                $this->db()->table('order_items')
                    ->where(array('id' => $o['refund_order_item_id']))
                    ->update(array('refund_qty', array('exp', "`refund_qty`-{$o['total_qty']}")));
            }
            //插入日志
            foreach ($orders as $o) {
                if (!$this->getLogModel()->recordAutoCancel($o['id'], 0, $o)) {
                    throw new \Exception($this->getLogModel()->getFalseMsg());
                }
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    public function agree()
    {
        $bean = $this->getBean();
        if (!$bean->getRefundOrderNo()) return $this->error('参数错误');
        $one = $this->db()->table('order_refund')
            ->field('uid,id,from_order_id,refund_order_type,refund_order_status,total_amount,total_qty,refund_order_item_id')
            ->where(array('refund_order_no' => $bean->getRefundOrderNo()))
            ->one();
        if (!$one) {
            return $this->error('售后单错误');
        }
        if ($one['refund_order_status'] != OrderRefundStatus::REFUND_APPLY) {
            return $this->error('售后单状态不允许审核通过');
        }
        $this->db()->beginTrans();
        try {
            $now = $this->getNowDateTime();
            $data = array();
            $data['agree_time'] = $now;
            $data['agree_operator_uid'] = $bean->getAuthUid();
            switch ($one['refund_order_type']) {
                case OrderRefundType::REIMBURSE:
                    $data['refund_order_status'] = OrderRefundStatus::FINISH;
                    $data['finish_time'] = $now;
                    //对应item的商品库存加回去
                    $goods_id = $this->db()->table('order_items')->field('goods_id')->where(array('id' => $one['refund_order_item_id']))->one();
                    $goods_id = $goods_id['goods_id'];
                    if ($goods_id) {
                        $this->db()->table('goods_info')->where(array('id' => $goods_id))->update(array(
                            'stock_qty' => array('exp', "`stock_qty`+{$one['total_qty']}"),
                            'sale_qty' => array('exp', "`sale_qty`-{$one['total_qty']}"),
                        ));
                    }
                    //检测订单是不是没有商品可以发货了
                    $items = $this->db()->table('order_items')->field('item_qty,refund_qty')->where(array('order_id' => $one['from_order_id']))->multi();
                    $isOver = true;
                    foreach ($items as $it) {
                        if ($it['item_qty'] < $it['refund_qty']) {
                            $isOver = false;
                            break;
                        }
                    }
                    if ($isOver == true) {
                        $this->db()->table('order')->where(array('id' => $one['from_order_id']))->update(array('order_status' => OrderStatus::REFUND_REIMBURSE));
                    }
                    //给钱
                    $walletBean = (new WalletBean());
                    $walletBean->setUid($one['uid']);
                    $walletBean->setType(WalletType::REFUND_REIMBURSE);
                    $walletBean->setBalanceLock($one['total_amount']);
                    $walletBean->setOperatorUid($bean->getAuthUid());
                    $walletBean->setData($one);
                    $WalletModel = (new WalletModel($this->getIO()));
                    if (!$WalletModel->gateWay__($walletBean)) {
                        throw new \Exception($WalletModel->getFalseMsg());
                    }
                    break;
                case OrderRefundType::REJECT:
                    $data['refund_order_status'] = OrderRefundStatus::REFUND_AGREE;
                    break;
                case OrderRefundType::REPLACE:
                    $data['refund_order_status'] = OrderRefundStatus::REFUND_AGREE;
                    break;
                case OrderRefundType::REPAIR:
                    $data['refund_order_status'] = OrderRefundStatus::REFUND_AGREE;
                    break;
                default:
                    throw new \Exception('类型错误');
                    break;
            }
            $bean->getAgreeRemark() && $data['agree_remark'] = $bean->getAgreeRemark();
            $this->db()->table('order_refund')->where(array('id' => $one['id']))->update($data);
            //插入日志
            if (OrderRefundType::REIMBURSE == $one['refund_order_type']) {
                if (!$this->getLogModel()->recordAgreeOver($one['id'], $bean->getAuthUid(), $one)) {
                    throw new \Exception($this->getLogModel()->getFalseMsg());
                }
            } else {
                if (!$this->getLogModel()->recordAgree($one['id'], $bean->getAuthUid(), $one)) {
                    throw new \Exception($this->getLogModel()->getFalseMsg());
                }
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    public function reject()
    {
        $bean = $this->getBean();
        if (!$bean->getRefundOrderNo()) return $this->error('参数错误');
        $one = $this->db()->table('order_refund')
            ->field('id,refund_order_type,refund_order_item_id,refund_order_status,total_qty')
            ->where(array('refund_order_no' => $bean->getRefundOrderNo()))
            ->one();
        if (!$one) {
            return $this->error('售后单错误');
        }
        if ($one['refund_order_status'] != OrderRefundStatus::REFUND_APPLY) {
            return $this->error('售后单状态不允许审核不通过');
        }
        $this->db()->beginTrans();
        try {
            $now = $this->getNowDateTime();
            $data = array();
            $data['reject_time'] = $now;
            $data['reject_operator_uid'] = $bean->getAuthUid();
            $data['refund_order_status'] = OrderRefundStatus::REFUND_REJECT;
            $bean->getRejectRemark() && $data['reject_remark'] = $bean->getRejectRemark();
            $this->db()->table('order_refund')->where(array('id' => $one['id']))->update($data);
            //补回数量
            $this->db()->table('order_items')->where(array('id' => $one['refund_order_item_id']))->update(array(
                'refund_qty' => array('exp', "`refund_qty`+{$one['total_qty']}")
            ));
            //插入日志
            if (!$this->getLogModel()->recordReject($one['id'], $bean->getAuthUid(), $one)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    public function sent()
    {
        $bean = $this->getBean();
        if (!$bean->getRefundOrderNo()) return $this->error('参数错误');
        if (!$bean->getSentExpressCode()) return $this->error('请选择快递');
        if (!$bean->getSentExpressNo()) return $this->error('请填写快递单号');
        $one = $this->db()->table('order_refund')->field('id,refund_order_status')->where(array('refund_order_no' => $bean->getRefundOrderNo()))->one();
        if (!$one) {
            return $this->error('售后单错误');
        }
        if ($one['refund_order_status'] != OrderRefundStatus::REFUND_AGREE) {
            return $this->error('售后单状态不允许买家寄货');
        }
        $this->db()->beginTrans();
        try {
            $now = $this->getNowDateTime();
            $data = array();
            $data['sent_time'] = $now;
            $data['refund_order_status'] = OrderRefundStatus::SENT;
            $data['sent_express_code'] = $bean->getSentExpressCode();
            $data['sent_express_no'] = $bean->getSentExpressNo();
            $this->db()->table('order_refund')->update($data, array('id' => $one['id']));
            //插入日志
            if (!$this->getLogModel()->recordSent($one['id'], $bean->getAuthUid(), $one)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    public function received()
    {
        $bean = $this->getBean();
        if (!$bean->getRefundOrderNo()) return $this->error('参数错误');
        $one = $this->db()->table('order_refund')
            ->field('id,uid,total_amount,total_qty,refund_order_type,refund_order_status,refund_order_item_id')
            ->where(array('refund_order_no' => $bean->getRefundOrderNo()))
            ->one();
        if (!$one) {
            return $this->error('售后单错误');
        }
        if ($one['refund_order_status'] != OrderRefundStatus::SENT) {
            return $this->error('售后单状态不允许卖家收货');
        }
        $this->db()->beginTrans();
        try {
            $now = $this->getNowDateTime();
            $data = array();
            $data['received_time'] = $now;
            switch ($one['refund_order_type']) {
                case OrderRefundType::REIMBURSE:
                    throw new \Exception('类型不允许收货');
                    break;
                case OrderRefundType::REJECT:
                    $data['refund_order_status'] = OrderRefundStatus::FINISH;
                    $data['finish_time'] = $now;
                    //对应item的商品库存加回去
                    $goods_id = $this->db()->table('order_items')->field('goods_id')->where(array('id' => $one['refund_order_item_id']))->one();
                    $goods_id = $goods_id['goods_id'];
                    if ($goods_id) {
                        $this->db()->table('goods_info')->where(array('id' => $goods_id))->update(array(
                            'stock_qty' => array('exp', "`stock_qty`+{$one['total_qty']}"),
                            'sale_qty' => array('exp', "`sale_qty`-{$one['total_qty']}"),
                        ));
                    }
                    //检测订单是不是没有商品可以评价了(全退了)
                    $items = $this->db()->table('order_items')->field('item_qty,refund_qty')->where(array('order_id' => $one['from_order_id']))->multi();
                    $isOver = true;
                    foreach ($items as $it) {
                        if ($it['item_qty'] < $it['refund_qty']) {
                            $isOver = false;
                            break;
                        }
                    }
                    if ($isOver == true) {
                        $this->db()->table('order')
                            ->where(array('id' => $one['from_order_id']))
                            ->update(array('order_status' => OrderStatus::REFUND_REJECT));
                    }
                    //给钱
                    $walletBean = (new WalletBean());
                    $walletBean->setUid($one['uid']);
                    $walletBean->setType(WalletType::REFUND_REJECT);
                    $walletBean->setBalanceLock($one['total_amount']);
                    $walletBean->setOperatorUid($bean->getAuthUid());
                    $walletBean->setData($one);
                    $WalletModel = (new WalletModel($this->getIO()));
                    if (!$WalletModel->gateWay__($walletBean)) {
                        throw new \Exception($WalletModel->getFalseMsg());
                    }
                    break;
                case OrderRefundType::REPLACE:
                    $data['refund_order_status'] = OrderRefundStatus::RECEIVED;
                    break;
                case OrderRefundType::REPAIR:
                    $data['refund_order_status'] = OrderRefundStatus::RECEIVED;
                    break;
                default:
                    throw new \Exception('类型错误');
                    break;
            }
            $this->db()->table('order_refund')->update($data, array('id' => $one['id']));
            //插入日志
            if (!$this->getLogModel()->recordSent($one['id'], $bean->getAuthUid(), $one)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    public function sentBack()
    {
        $bean = $this->getBean();
        if (!$bean->getRefundOrderNo()) return $this->error('参数错误');
        if (!$bean->getSentBackExpressCode()) return $this->error('请选择快递');
        if (!$bean->getSentBackExpressNo()) return $this->error('请填写快递单号');
        $one = $this->db()->table('order_refund')->field('id,refund_order_status')->where(array('refund_order_no' => $bean->getRefundOrderNo()))->one();
        if (!$one) {
            return $this->error('售后单错误');
        }
        if ($one['refund_order_status'] != OrderRefundStatus::RECEIVED) {
            return $this->error('售后单状态不允许寄回货物');
        }
        $this->db()->beginTrans();
        try {
            $now = $this->getNowDateTime();
            $data = array();
            $data['sent_back_time'] = $now;
            $data['refund_order_status'] = OrderRefundStatus::SENT_BACK;
            $data['sent_back_express_code'] = $bean->getSentBackExpressCode();
            $data['sent_back_express_no'] = $bean->getSentBackExpressNo();
            ($bean->getSentBackRemarks()) && $data['sent_back_remarks'] = $bean->getSentBackRemarks();
            $this->db()->table('order_refund')->update($data, array('id' => $one['id']));
            //插入日志
            if (!$this->getLogModel()->recordSentBack($one['id'], $bean->getAuthUid(), $one)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    public function refunded()
    {
        $bean = $this->getBean();
        if (!$bean->getRefundOrderNo()) return $this->error('参数错误');
        if (!$bean->getPayPassword()) return $this->error('密码错误');
        //检查支付密码
        try {
            $WalletModel = (new WalletModel($this->getIO()));
            if (!$WalletModel->authPayPassword__($bean->getAuthUid(), $bean->getPayPassword())) {
                throw new \Exception($WalletModel->getFalseMsg());
            }
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        $one = $this->db()->table('order_refund')->field('id,refund_order_status')
            ->where(array('refund_order_no' => $bean->getRefundOrderNo()))
            ->one();
        if (!$one) {
            return $this->error('售后单错误');
        }
        if ($one['refund_order_status'] != OrderRefundStatus::SENT_BACK) {
            return $this->error('售后单状态不允许收货');
        }
        $this->db()->beginTrans();
        try {
            $now = $this->getNowDateTime();
            $data = array();
            $data['finish_time'] = $now;
            $data['refund_order_status'] = OrderRefundStatus::FINISH;
            $this->db()->table('order_refund')->where(array('id' => $one['id']))->update($data);
            //插入日志
            if (!$this->getLogModel()->recordReceivedBackOver($one['id'], $bean->getAuthUid(), $one)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }


    public function plan()
    {

        //先执行一下系统自动取消
        $this->systemCancel();

        $now = $this->getNowDateTime();
        $config = $this->getConfigValueList(null, ConfigType::ORDER);

        $resultBox = array(
            'order_refund_received_expire' => array(),
        );
        //买家不收货
        if ($config['order_refund_received_expire_day'] > 0) {
            $config['order_refund_received_expire_day'] = (int)ceil($config['order_refund_received_expire_day']);
            $time = date('Y-m-d H:i:s', strtotime($now . ' +' . $config['order_refund_received_expire_day'] . ' day'));
            $orders = $this->db()->table('order_refund')
                ->field('id,refund_order_no')
                ->in('refund_order_type', [OrderRefundType::REPLACE, OrderRefundType::REPAIR])
                ->equalTo('refund_order_status', OrderRefundStatus::SENT_BACK)
                ->lessThanOrEqualTo('sent_back_time', $time)
                ->limit(10)
                ->multi();
            $orderIds = array();
            foreach ($orders as $v) {
                $orderIds[] = $v['id'];
            }
            if ($orderIds) {
                $this->db()->beginTrans();
                try {
                    $this->db()->table('order_refund')->where(array('id' => array('in', $orderIds)))->update(
                        array('refund_order_status' => OrderStatus::FINISH, 'finish_time' => $now)
                    );
                    //写日志
                    foreach ($orders as $o) {
                        if (!$this->getLogModel()->recordReceivedBackOverAuto($o['id'], 0, $o)) {
                            throw new \Exception($this->getLogModel()->getFalseMsg());
                        }
                    }
                    $resultBox['order_refund_received_expire'] = $orderIds;
                } catch (\Exception $e) {
                    $this->db()->rollBackTrans();
                    $resultBox['order_refund_received_expire'] = $e->getMessage();
                }
                $this->db()->commitTrans();
            }
        }
        return $this->success($resultBox);
    }

}
