<?php

namespace Order\Model;

use Canteen\Model\BookingModel;
use Common\Map\IsEnable;
use Common\Map\IsSure;
use Finance\Bean\WalletBean;
use Finance\Map\WalletType;
use Finance\Model\WalletModel;
use Goods\Map\GoodsEvaluate;
use Goods\Map\GoodsStatus;
use Order\Bean\OrderFreightRuleBean;
use Order\Bean\ShoppingCartBean;
use Order\Bean\OrderBean;
use Order\Map\FreightRuleType;
use Order\Map\OrderStatus;
use Order\Map\OrderTradeTerminal;
use Order\Map\OrderTradePlace;
use Order\Map\OrderType;
use Order\Map\PayStatus;
use Order\Map\PayType;

class OrderModel extends AbstractModel
{

    const ORDER_AUTO_CANCEL_SEC = 12 * 60 * 60; //12小时不支付自动作废

    /**
     * @return OrderBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取连表视图
     * @return \library\Pgsql
     */
    protected function getViewModel()
    {
        return $this->db()->table('order')
            ->join('order', 'data_express as express', array('sent_express_code' => 'code'), 'LEFT')
            ->join('order', 'user_info as info', array('uid' => 'uid'), 'LEFT')
            ->join('info', 'user as base', array('uid' => 'uid'), 'LEFT')
            ->field('*', 'order')
            ->field('name AS sent_express_name', 'express')
            ->field('avatar', 'info')
            ->field('mobile', 'base');
    }

    /**
     * @param \library\Pgsql $model
     * @return \library\Pgsql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $model->whereTable('order');
        $bean->getId() && $model->in('id', $bean->getId());
        $bean->getUid() && $model->in('uid', $bean->getUid());
        $bean->getStatus() && $model->in('status', $bean->getStatus());
        $bean->getType() && $model->in('type', $bean->getType());
        $bean->getTradePlace() && $model->equalTo('trade_place', $bean->getTradePlace());
        $bean->getPayStatus() && $model->equalTo('pay_status', $bean->getPayStatus());
        $bean->getPayType() && $model->equalTo('pay_type', $bean->getPayType());
        $bean->getNo() && $model->like('no', "%" . $bean->getNo() . "%");
        $bean->getName() && $model->like('name', "%" . $bean->getName() . "%");
        $bean->getDescription() && $model->like('description', "%" . $bean->getDescription() . "%");
        $bean->getShippingRegion() && $model->like('shipping_region', "%" . $bean->getShippingRegion() . "%");
        $bean->getShippingAddress() && $model->like('shipping_address', "%" . $bean->getShippingAddress() . "%");
        $bean->getSentExpressNo() && $model->like('sent_express_no', "%" . $bean->getSentExpressNo() . "%");
        $bean->getSentExpressCode() && $model->like('sent_express_code', "%" . $bean->getSentExpressCode() . "%");
        $bean->getCreateTime() && $model->between('create_time', $bean->getCreateTime());
        $model->whereTable('base');
        $bean->getMobile() && $model->like('mobile', "%" . $bean->getMobile() . "%");
        $model->whereTable(null);
        return $model;
    }

    private $logModel = null;

    private function getLogModel()
    {
        if (!$this->logModel) $this->logModel = (new LogModel());
        return $this->logModel;
    }

    /**
     * 创建一个订单号
     * @return string
     */
    private function createOrderNo()
    {
        $time = explode(' ', microtime());
        $no = date('YmdHis') . str_replace('0.', '', $time[0]) . randCharNum(3);
        return $no;
    }


    /**
     * @param null $data
     * @param string $response
     * @return array
     */
    protected function success($data = null, $response = 'success')
    {
        if (!is_array($data)) {
            return parent::success($data, $response);
        }
        return parent::success($this->factoryData($data, function ($tempData) {
            $orderIds = array();
            foreach ($tempData as $v) {
                $orderIds[] = $v['order_id'];
            }
            $orderItems = array();
            if ($orderIds) {
                $result = $this->db()->table('order_items')->in('order_id', $orderIds)->multi();
                foreach ($result as $v) {
                    if (!isset($orderItems[$v['order_items_order_id']])) {
                        $orderItems[$v['order_id']] = array();
                    }
                    $v['order_items_item_data'] && $v['order_items_item_data'] = json_decode($v['order_items_item_data'], true);
                    $orderItems[$v['order_items_order_id']][] = $v;
                }
                $newItems = array();
                foreach ($orderItems as $k => $item) {
                    $newData = array();
                    foreach ($item as $v) {
                        if (!isset($newData[$v['order_items_seller_uid']])) {
                            $newData[$v['order_items_seller_uid']] = array(
                                'seller_uid' => $v['order_items_seller_uid'],
                                'seller_name' => $v['order_items_seller_name'],
                                'list' => array(),
                            );
                        }
                        $newData[$v['order_items_seller_uid']]['list'][] = $v;
                    }
                    sort($newData);
                    $newItems[$k] = $newData;
                }
                $orderItems = $newItems;
            }
            $orderTypeMap = (new OrderType())->getKV();
            $orderTradePlaceMap = (new OrderTradePlace())->getKV();
            $orderStatusMap = (new OrderStatus)->getKV();
            $payStatusMap = (new PayStatus)->getKV();
            $payTypeMap = (new PayType())->getKV();
            foreach ($tempData as $k => $v) {
                ($v['order_type']) && $tempData[$k]['order_type_label'] = $orderTypeMap[$v['order_type']];
                ($v['order_trade_place']) && $tempData[$k]['order_trade_place_label'] = $orderTradePlaceMap[$v['order_trade_place']];
                ($v['order_status']) && $tempData[$k]['order_status_label'] = $orderStatusMap[$v['order_status']];
                ($v['order_pay_status']) && $tempData[$k]['order_pay_status_label'] = $payStatusMap[$v['order_pay_status']];
                ($v['order_pay_type']) && $tempData[$k]['order_pay_type_label'] = $payTypeMap[$v['order_pay_type']];
                ($v['order_pay_return_data']) && $tempData[$k]['order_pay_return_data'] = json_decode($v['order_pay_return_data'], true);
                ((isset($orderItems[$v['order_id']])) && $tempData[$k]['order_items'] = $orderItems[$v['order_id']]);
            }
            return $tempData;
        }), $response);
    }

    /**
     * 获取列表
     * @return array
     */
    public function getList()
    {
        //自动取消过期订单
        $this->systemCancel();

        $bean = $this->getBean();
        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        $model->orderBy('create_time', 'desc', 'order');
        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($result);
    }

    /**
     * @return array
     */
    public function getInfo()
    {

        //自动取消过期订单
        $this->systemCancel();

        $model = $this->getViewModel();
        $model = $this->bindWhere($model);
        $result = $model->one();
        return $this->success($result);
    }

    /**
     * 获取订单统计信息
     * @return array
     */
    public function stat()
    {
        $bean = $this->getBean();

        $stat = array();
        $orderTypeMap = (new OrderType())->getKV();
        $payTypeMap = (new PayType())->getKV();
        array_push($orderTypeMap, array('key' => '0', 'value' => array('', '全部')));
        array_push($payTypeMap, array('key' => '0', 'value' => array('', '全部')));
        foreach ($orderTypeMap as $ok => $ov) {
            $temp = array(
                'type' => $ok,
                'type_label' => $ov,
                'list' => array()
            );
            foreach ($payTypeMap as $pk => $pv) {
                //排除掉余额充值
                if ($ok == OrderType::RECHARGE && $pk == PayType::WALLET) {
                    continue;
                }
                $model = $this->db()->table('order');
                $model->equalTo('pay_status', PayStatus::PAYED);
                $bean->getCreateTime() && $model->between('create_time', $bean->getCreateTime());
                $ok && $model->equalTo('type', $ok);
                $pk && $model->equalTo('pay_type', $pk);
                $result = $model
                    ->field('id as total_qty', 'order', 'COUNT(%0)')
                    ->field('total_amount as total_amount', 'order', 'SUM(%0)')
                    ->field('pay_amount as total_pay_amount', 'order', 'SUM(%0)')
                    ->one();
                $result = parseReal($result);
                $temp['list'][] = array(
                    'pay_type' => $pk,
                    'pay_type_label' => $pv,
                    'stat' => $result,
                );
            }
            $stat[] = $temp;
        }
        return $stat;
    }

    /**
     * 确认订单信息(购物车)
     * @param OrderBean $bean
     * @return array
     */
    private function confirmCart(OrderBean $bean)
    {

        $result = array();

        $confirmInfo = $bean->getConfirmInfo();

        $shippingAddress = $confirmInfo['shipping_address'];//收货地址
        if (!$shippingAddress) {
            $shippingAddress = $this->db()->table('user_shipping_address')->orderBy('is_default', 'desc')->where(array('uid' => $bean->getAuthUid()))->one();
        }
        $result['shipping_address'] = $shippingAddress ?: null;

        $cartChoosing = $confirmInfo['cart'] ?? null; // 购物车当前物品
        $cartIds = array();
        if ($cartChoosing) {
            foreach ($cartChoosing as $v) {
                $cartIds = array_merge($cartIds, $v);
            }
        }
        if (!$confirmInfo || !$cartChoosing || !$cartIds) {
            return $result;
        }
        //获取最新的数据库数据
        $cartBean = (new ShoppingCartBean());
        $cartBean->setUid($bean->getAuthUid());
        $cartBean->setId($cartIds);
        $cartModel = (new ShoppingCartModel());
        $cartList = $cartModel->getListConform($cartBean);
        if (!$cartList) {
            return array();
        }

        //挑出购买的店及其商品
        $sellerUids = array();
        $result['total_settle_sell_price'] = 0;
        $result['total_settle_freight'] = 0;
        $result['total_settle_weight'] = 0;
        $result['total_settle_qty'] = 0;
        $result['item_list'] = array();
        foreach ($cartList as $c) {
            $sellerUids[] = $c['seller_uid'];
            $temp = array();
            $temp['seller_uid'] = $c['seller_uid'];
            $temp['seller_name'] = $c['seller_name'];
            $temp['list'] = array();
            $temp['seller_settle_sell_price'] = 0;
            $temp['seller_settle_freight'] = 0;
            $temp['seller_settle_weight'] = 0;
            $temp['seller_settle_qty'] = 0;
            foreach ($c['list'] as $cl) {
                if ($cl['order_shopping_cart_uid'] == $bean->getAuthUid()) {
                    //判断是否选中
                    if (in_array($cl['order_shopping_cart_id'], $cartChoosing[$c['seller_uid']])) {
                        $temp['list'][] = $cl;
                        if ($cl['goods_status'] == GoodsStatus::yes) {
                            //上架才计算价值
                            $cl['settle_sell_price'] = round($cl['goods_price_sell'] * $cl['order_shopping_cart_qty'], 2);
                            $cl['settle_weight'] = round($cl['goods_weight'] * $cl['order_shopping_cart_qty'], 2);

                            $temp['seller_settle_sell_price'] += $cl['settle_sell_price'];
                            $temp['seller_settle_weight'] += $cl['settle_weight'];
                            $temp['seller_settle_qty'] += $cl['order_shopping_cart_qty'];
                        }
                    }
                }
            }
            $temp['seller_settle_sell_price'] = round($temp['seller_settle_sell_price'], 2);
            $temp['seller_settle_weight'] = round($temp['seller_settle_weight'], 2);
            $temp['seller_settle_qty'] = (int)$temp['seller_settle_qty'];

            //todo 找出对店铺最适合的运费策略
            /*
            $freightRuleBean = (new OrderFreightRuleBean());
            if ($sellerUids) {
                $freightRuleBean->setSellerUid($sellerUids);
            }
            if (!empty($shippingAddress['region'])) {
                $freightRuleBean->setRegion($shippingAddress['region']);
            }
            $freightRuleBean->setStatus(IsEnable::yes);
            $freightRuleModel = (new OrderFreightRuleModel());
            $seller_freight_rule = $freightRuleModel->getBestRole__($freightRuleBean);
            if ($seller_freight_rule !== null) {
                //计算店铺运费
                $temp['freight_rule'] = $seller_freight_rule;
                if ($seller_freight_rule['is_free_shipping'] == IsSure::no) {
                    $temp['seller_settle_freight'] = 0;
                    switch ($seller_freight_rule['rule_type']) {
                        case FreightRuleType::weight:
                            //按重量算
                            $weight = $temp['seller_settle_weight'];
                            $first_kilo = $seller_freight_rule['first_kilo'];
                            $fee_first_kilo = $seller_freight_rule['fee_first_kilo'];
                            $fee_per_kilo = $seller_freight_rule['fee_per_kilo'];
                            if ($first_kilo > 0) {
                                //有首重的情况下
                                $weight = round($weight - $first_kilo, 2);
                                $temp['seller_settle_freight'] += $fee_first_kilo;
                            }
                            $temp['seller_settle_freight'] += ceil($weight / 1) * $fee_per_kilo;
                            break;
                        case FreightRuleType::volume:
                            //按体积算,暂无
                            $weight = ($a*$b*$c)/$seller_freight_rule['volume_var'];
                            $first_kilo = $seller_freight_rule['first_kilo'];
                            $fee_first_kilo = $seller_freight_rule['fee_first_kilo'];
                            $fee_per_kilo = $seller_freight_rule['fee_per_kilo'];
                            if($first_kilo>0){
                                //有首重的情况下
                                $weight = round($weight - $first_kilo,2);
                                $temp['seller_settle_freight'] += $fee_first_kilo;
                            }
                            $temp['seller_settle_freight'] += ceil($weight/1) * $fee_per_kilo;
                            break;
                        case FreightRuleType::qty:
                            $qty = $temp['seller_settle_qty'];
                            $fee_first_qty = $seller_freight_rule['fee_first_qty'];
                            $fee_per_qty = $seller_freight_rule['fee_per_qty'];
                            //首件
                            $qty--;
                            $temp['seller_settle_freight'] += $fee_first_qty;
                            $temp['seller_settle_freight'] += $qty * $fee_per_qty;
                            break;
                        default:
                            $temp['seller_settle_freight'] = 0;
                            $temp['reason_of_free_freight'] = 'error_freight_rule';
                            break;
                    }
                    //计算特殊情况
                    $free_shipping_kilo = $seller_freight_rule['free_shipping_kilo'];
                    $free_shipping_amount = $seller_freight_rule['free_shipping_amount'];
                    $free_shipping_qty = $seller_freight_rule['free_shipping_qty'];
                    if ($free_shipping_kilo != -1 && $temp['seller_settle_weight'] <= $free_shipping_kilo) {
                        $temp['seller_settle_freight'] = 0;
                        $temp['reason_of_free_freight'] = 'free_shipping_kilo';
                    }
                    if ($free_shipping_amount != -1 && $temp['seller_settle_sell_price'] >= $free_shipping_amount) {
                        $temp['seller_settle_freight'] = 0;
                        $temp['reason_of_free_freight'] = 'free_shipping_amount';
                    }
                    if ($free_shipping_qty != -1 && $temp['seller_settle_qty'] >= $free_shipping_qty) {
                        $temp['seller_settle_freight'] = 0;
                        $temp['reason_of_free_freight'] = 'free_shipping_qty';
                    }
                } else {
                    $temp['seller_settle_freight'] = 0;
                    $temp['reason_of_free_freight'] = 'is_free_shipping';
                }
            } else {
                $temp['seller_settle_freight'] = 0;
                $temp['reason_of_free_freight'] = 'not_freight_rule';
            }
            */
            $temp['seller_settle_pay'] = round($temp['seller_settle_sell_price'] + $temp['seller_settle_freight'], 2);
            //
            $result['total_settle_sell_price'] = $result['total_settle_sell_price'] += $temp['seller_settle_sell_price'];
            $result['total_settle_freight'] = $result['total_settle_freight'] += $temp['seller_settle_freight'];
            $result['total_settle_weight'] = $result['total_settle_weight'] += $temp['seller_settle_weight'];
            $result['total_settle_qty'] = $result['total_settle_qty'] += $temp['seller_settle_qty'];
            $result['item_list'][] = $temp;
        }
        $result['total_settle_sell_price'] = round($result['total_settle_sell_price'], 2);
        $result['total_settle_freight'] = round($result['total_settle_freight'], 2);
        $result['total_settle_weight'] = round($result['total_settle_weight'], 2);
        $result['total_settle_qty'] = (int)$result['total_settle_qty'];
        $result['total_settle_pay'] = round($result['total_settle_sell_price'] + $result['total_settle_freight'], 2);
        return $result;
    }

    /**
     * 确认订单入口
     * @return array
     */
    public function confirm()
    {
        $bean = $this->getBean();
        switch ($bean->getType()) {
            case OrderType::SHOPPING:
                return $this->success($this->confirmCart($bean));
                break;
            default:
                return $this->error('确认类型错误');
                break;
        }
    }

    public function create()
    {

        //自动取消过期订单
        $this->systemCancel();

        $bean = $this->getBean();

        if (!$bean->getUid()) return $this->error('参数错误');
        if (!$bean->getType()) return $this->error('参数错误:ot');
        if (!$bean->getOrderData()) return $this->error('参数错误:od');
        $orderData = $bean->getOrderData();

        //事务开始
        $this->db()->beginTrans();
        try {
            $status = OrderStatus::ORDERED;
            $pay_status = PayStatus::UNPAY;
            $orderItems = array();
            $cartIds = array();
            switch ($bean->getType()) {
                case OrderType::SHOPPING:
                    if (!isset($orderData['shipping_address'])) throw new \Exception('收货地址错误');
                    if (!isset($orderData['total_settle_sell_price'])) throw new \Exception('结算错误');
                    if (!isset($orderData['total_settle_freight'])) throw new \Exception('运费错误');
                    if (!isset($orderData['total_settle_weight'])) throw new \Exception('重量错误');
                    if (!isset($orderData['total_settle_qty'])) throw new \Exception('计件错误');
                    if (!isset($orderData['total_settle_pay'])) throw new \Exception('付款错误');
                    if (!isset($orderData['item_list'])) throw new \Exception('物件错误');
                    if (!$orderData['item_list']) throw new \Exception('物件错误');

                    if (!$orderData['shipping_address']) throw new \Exception('缺少收货地址');
                    if ($orderData['total_settle_qty'] <= 0) throw new \Exception('数量非法');
                    if ($orderData['total_settle_pay'] < 0) throw new \Exception('金额非法');

                    //数据初始化
                    $orderData['total_settle_favorable'] = 0;
                    $orderData['total_settle_sell_price'] = round($orderData['total_settle_sell_price'], 2);
                    $orderData['total_settle_freight'] = round($orderData['total_settle_freight'], 2);
                    $orderData['total_settle_weight'] = round($orderData['total_settle_weight'], 2);
                    $orderData['total_settle_pay'] = round($orderData['total_settle_pay'], 2);
                    $orderData['total_settle_favorable'] = round($orderData['total_settle_favorable'], 2);
                    $orderData['total_settle_qty'] = (int)$orderData['total_settle_qty'];

                    $orderName = '购物单';
                    $orderDesc = '共计' . $orderData['total_settle_qty'] . '件，需支付金额' . $orderData['total_settle_pay'] . '元';
                    foreach ($orderData['item_list'] as $il) {
                        foreach ($il['list'] as $ill) {
                            $cartIds[] = $ill['order_shopping_cart_id'];
                            if ($ill['goods_status'] == GoodsStatus::yes) {
                                $orderItems[] = array(
                                    'order_id' => 0,
                                    'seller_uid' => $ill['goods_uid'],
                                    'seller_name' => $ill['seller_name'],
                                    'item_amount' => $ill['goods_price_sell'],
                                    'item_amount_origin' => $ill['goods_price_sell'],
                                    'item_amount_before_favour' => $ill['goods_price_sell'],
                                    'item_weight' => $ill['goods_weight'],
                                    'item_total_amount' => round($ill['goods_price_sell'] * $ill['order_shopping_cart_qty'], 2),
                                    'item_total_weight' => round($ill['goods_weight'] * $ill['order_shopping_cart_qty'], 3),
                                    'item_qty' => $ill['order_shopping_cart_qty'],
                                    'item_name' => $ill['goods_name'],
                                    'goods_id' => $ill['order_shopping_cart_goods_id'],
                                    'item_data' => $ill,
                                );
                                //减库存,增销量
                                $ginfo = $this->db()->table('goods')
                                    ->field('qty_stock,qty_sale')
                                    ->where(array('id' => $ill['order_shopping_cart_goods_id']))
                                    ->one();
                                if (((int)$ginfo['goods_qty_stock'] - $ill['order_shopping_cart_qty']) < 0) {
                                    throw new \Exception($ill['goods_name'] . '库存不足，请重新下单');
                                }
                                $this->db()->table('goods')
                                    ->where(array('id' => $ill['order_shopping_cart_goods_id']))
                                    ->update(array(
                                        'qty_stock' => array('exp', "qty_stock-{$ill['order_shopping_cart_qty']}"),
                                        'qty_sale' => array('exp', "qty_sale+{$ill['order_shopping_cart_qty']}"),
                                    ));
                            }
                        }
                    }
                    break;
                case OrderType::CANTEEN_ORDER:
                    $goodsIds = $orderData['goods_id'] ?? null;
                    if (!$goodsIds) throw new \Exception('商品错误');
                    $canteenModel = (new BookingModel());
                    $booking = $canteenModel->getTwoMonthRecordByUid__($bean->getUid());
                    $contain = array_diff($goodsIds, $booking);
                    if (count($goodsIds) !== count($contain)) {
                        throw new \Exception('存在已订过的餐');
                    }
                    $goodsInfo = $this->db()->table('goods')->in('id', $goodsIds)->multi();
                    if (!$goodsInfo) {
                        throw new \Exception('餐牌不存在');
                    }
                    $goodsNames = array_column($goodsInfo, 'goods_name');
                    $goodsStatus = array_column($goodsInfo, 'goods_status');
                    if (in_array(GoodsStatus::no, $goodsStatus) || in_array(GoodsStatus::del, $goodsStatus)) {
                        throw new \Exception('存在已下架或删除的餐');
                    }
                    $orderTotalPrice = 0;
                    $orderName = '订餐';
                    $orderData['total_settle_sell_price'] = 0;
                    $orderData['total_settle_freight'] = 0;
                    $orderData['total_settle_favorable'] = 0;
                    $orderData['total_settle_weight'] = 0;
                    $orderData['total_settle_qty'] = count($goodsInfo);
                    foreach ($goodsInfo as $g) {
                        $orderTotalPrice += $g['goods_price_sell'];
                        $orderItems[] = array(
                            'order_id' => 0,
                            'seller_uid' => CONFIG['admin_uid'],
                            'seller_name' => '自营',
                            'item_amount' => $g['goods_price_sell'],
                            'item_amount_origin' => $g['goods_price_sell'],
                            'item_amount_before_favour' => $g['goods_price_sell'],
                            'item_weight' => 0,
                            'item_total_amount' => $g['goods_price_sell'],
                            'item_total_weight' => 0,
                            'item_qty' => 1,
                            'item_name' => $g['goods_name'],
                            'goods_id' => $g['goods_id'],
                            'item_data' => $g,
                        );
                    }
                    $orderData['total_settle_pay'] = round($orderTotalPrice, 2);
                    $orderData['total_settle_sell_price'] = $orderData['total_settle_pay'];
                    $orderDesc = implode('、', $goodsNames) . "，需支付{$orderTotalPrice}元";
                    break;
                case OrderType::RECHARGE:
                    $orderData['total_settle_pay'] = round($orderData['total_settle_pay'], 3);
                    if ($orderData['total_settle_pay'] <= 0) throw new \Exception('无效的充值金额');
                    $orderName = '充值单';
                    $orderDesc = "充值{$orderData['total_settle_pay']}元";
                    $orderData['total_settle_sell_price'] = $orderData['total_settle_pay'];
                    $orderData['total_settle_freight'] = 0;
                    $orderData['total_settle_favorable'] = 0;
                    $orderData['total_settle_weight'] = 0;
                    $orderData['total_settle_qty'] = 1;
                    $orderItems[] = array(
                        'order_id' => 0,
                        'seller_uid' => '1',
                        'seller_name' => '自营',
                        'item_amount' => $orderData['total_settle_pay'],
                        'item_amount_origin' => $orderData['total_settle_pay'],
                        'item_amount_before_favour' => $orderData['total_settle_pay'],
                        'item_weight' => 0,
                        'item_total_amount' => $orderData['total_settle_pay'],
                        'item_total_weight' => 0,
                        'item_qty' => 1,
                        'item_name' => '充值',
                        'goods_id' => 0,
                        'item_data' => [],
                    );
                    break;
                default:
                    throw new \Exception('类型错误');
            }
            //todo 插入订单
            $data = array();
            $data['uid'] = $bean->getUid();
            $data['no'] = $this->createOrderNo();
            $data['status'] = $status;
            $data['type'] = $bean->getType();
            $data['name'] = $orderName;
            $data['description'] = $orderDesc;
            $data['total_amount'] = $orderData['total_settle_sell_price'];
            $data['total_freight'] = $orderData['total_settle_freight'];
            $data['total_favorable'] = $orderData['total_settle_favorable'];
            $data['total_weight'] = $orderData['total_settle_weight'];
            $data['total_qty'] = $orderData['total_settle_qty'];
            $data['pay_amount'] = $orderData['total_settle_pay'];
            $data['pay_status'] = $pay_status;
            $data['create_time'] = $this->getNowDateTime();
            $data['trade_place'] = $orderData['trade_place'] ?? OrderTradePlace::NO_RECORD;
            (isset($orderData['buyer_remarks'])) && $data['buyer_remarks'] = $orderData['buyer_remarks'];
            (isset($orderData['seller_remarks'])) && $data['seller_remarks'] = $orderData['seller_remarks'];
            if (!empty($orderData['trade_terminal'])) {
                if (!in_array($orderData['trade_terminal'], [OrderTradeTerminal::ANDROID, OrderTradeTerminal::IPHONE])) {
                    $data['trade_terminal'] = OrderTradeTerminal::NU_KNOW;
                } else $data['trade_terminal'] = $orderData['trade_terminal'];
            } else {
                $data['trade_terminal'] = OrderTradeTerminal::NU_KNOW;
            }
            if (isset($orderData['shipping_address'])) {
                $data['shipping_region'] = $orderData['shipping_address']['user_shipping_address_region'];
                $data['shipping_address'] = $orderData['shipping_address']['user_shipping_address_address'];
                $data['contact_user'] = $orderData['shipping_address']['user_shipping_address_contact_user'];
                $data['contact_mobile'] = $orderData['shipping_address']['user_shipping_address_contact_mobile'];
                if (isset($orderData['shipping_address']['shop_id'])) {
                    $data['shop_id'] = $orderData['shipping_address']['shop_id'];
                }
            }
            if (!$this->db()->table('order')->insert($data)) {
                throw new \Exception($this->db()->getError());
            }
            $orderId = $this->db()->lastInsertId();
            //插入item
            if (!$orderItems) {
                throw new \Exception('订单商品丢失');
            }
            foreach ($orderItems as $ik => $iv) {
                $orderItems[$ik]['order_id'] = $orderId;
            }
            $this->db()->table('order_items')->insertAll($orderItems);
            //写个日志
            if (!$this->getLogModel()->recordCreate__($orderId, $bean->getAuthUid(), $orderData)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
            //todo 清空相关购物车
            if ($cartIds && $bean->getUid()) {
                $this->db()->table('order_shopping_cart')->equalTo('uid', $bean->getUid())->delete();
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        $data['id'] = $orderId;
        return $this->success($data);
    }

    public function cancel()
    {

        //自动取消过期订单
        $this->systemCancel();

        $bean = $this->getBean();

        if (!$bean->getId()) return $this->error('参数错误');

        $one = $this->db()->table('order')
            ->equalTo('id', $bean->getId())
            ->equalTo('status', OrderStatus::ORDERED)
            ->equalTo('pay_status', PayStatus::UNPAY)
            ->one();
        if (!$one) return $this->error('订单状态错误或已被取消');
        //找出订单的items
        $itemCache = $this->db()->table('order_items')->where(array('order_id' => $bean->getId()))->multi();
        $items = array();
        foreach ($itemCache as $itc) {
            if ($itc['order_items_goods_id'] > 0) {
                if (!isset($items[$itc['order_items_goods_id']])) {
                    $items[$itc['order_items_goods_id']] = array(
                        'qty' => $itc['order_items_item_qty'],
                    );
                } else $items[$itc['order_items_goods_id']]['qty'] += $itc['order_items_item_qty'];
            }
        }
        $this->db()->beginTrans();
        try {
            //修改订单为手动取消
            $data = array();
            $data['status'] = OrderStatus::CANCELED;
            $data['cancel_time'] = $this->getNowDateTime();
            $this->db()->table('order')->equalTo('id', $bean->getId())->update($data);
            //修改订单对应库存
            if ($items) {
                foreach ($items as $goods_id => $g) {
                    $this->db()->table('goods')
                        ->equalTo('id', $goods_id)
                        ->update(array(
                            'stock_qty' => array('exp', "`stock_qty`+{$g['qty']}"),
                            'sale_qty' => array('exp', "`sale_qty`-{$g['qty']}"),
                        ));
                }
            }
            //写日志
            if (!$this->getLogModel()->recordCancel__($one['order_id'], $bean->getAuthUid(), $one['no'])) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    private function systemCancel($orderIds = null)
    {
        $model = $this->db()->table('order');
        $model->equalTo('status', OrderStatus::ORDERED);
        $model->equalTo('pay_status', PayStatus::UNPAY);
        //如果有赋予订单id，则只对该部分订单取消，否则按时间取消
        if ($orderIds) {
            $model->in('id', $orderIds);
        } else {
            $model->lessThan('create_time', date('Y-m-d H:i:s', time() - self::ORDER_AUTO_CANCEL_SEC));
        }
        $orders = $model->limit(20)->multi();
        if (!$orders || !is_array($orders)) {
            return true;
        }
        if (count($orders) == 0) {
            return true;
        }
        $orderIds = array();
        foreach ($orders as $o) {
            if ($o['order_id']) $orderIds[] = $o['order_id'];
        }
        //找出订单的items
        $itemCache = $this->db()->table('order_items')->in('order_id', $orderIds)->multi();
        $items = array();
        foreach ($itemCache as $itc) {
            if ($itc['order_items_goods_id'] > 0) {
                if (!isset($items[$itc['order_items_goods_id']])) {
                    $items[$itc['order_items_goods_id']] = array(
                        //'base_goods_id' => $itc['order_items_base_goods_id'],
                        'qty' => $itc['order_items_item_qty'],
                    );
                } else $items[$itc['order_items_goods_id']]['qty'] += $itc['order_items_item_qty'];
            }
        }
        $this->db()->beginTrans();
        try {
            //修改订单为系统取消
            $data = array();
            $data['status'] = OrderStatus::AUTO_CANCEL;
            $data['auto_cancel_time'] = $this->getNowDateTime();
            $this->db()->table('order')->in('id', $orderIds)->update($data);
            //修改订单对应库存
            if ($items) {
                foreach ($items as $goods_id => $g) {
                    $this->db()->table('goods')
                        ->equalTo('id', $goods_id)
                        ->update(array(
                            'qty_stock' => array('exp', "qty_stock + {$g['qty']}"),
                            'qty_sale' => array('exp', "qty_sale - {$g['qty']}"),
                        ));
                }
            }
            //写日志
            foreach ($orders as $o) {
                if (!$this->getLogModel()->recordAutoCancel__($o['order_id'], 0, $o)) {
                    throw new \Exception($this->getLogModel()->getFalseMsg());
                }
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->error($e->getMessage());
        }
        $this->db()->commitTrans();
        return $this->success();
    }

    /**
     * 支付
     * @param OrderBean $bean
     * @return array|bool
     */
    public function pay__(OrderBean $bean)
    {
        if (!$bean->getNo()) return $this->false('参数错误:on');
        if (!$bean->getPayType()) return $this->false('参数错误:pt');

        $one = $this->db()->table('order')->equalTo('no', $bean->getNo())->one();
        if (!$one) {
            return $this->false('非法订单');
        }
        if ($one['order_pay_status'] == PayStatus::PAYED) {
            return $this->false('PAY_FINISH');
        }
        if ($one['order_status'] != OrderStatus::ORDERED) {
            return $this->false('订单状态不允许继续支付');
        }
        $payTypeMap = array_keys((new PayType())->getKV());
        if (!in_array($bean->getPayType(), $payTypeMap)) {
            return $this->false('参数类型错误:pt');
        }

        $orderId = $one['order_id'];

        $payReturnData = $bean->getPayReturnData();
        $tempAmount = 0;
        if ($payReturnData) {
            if (is_string($payReturnData)) {
                $payReturnData = json_decode($payReturnData, true);
            } elseif (is_array($payReturnData)) {
                $payReturnData = (array)$payReturnData;
            } else {
                return $this->false('错误的回调数据');
            }
            if ($bean->getPayType() == PayType::ALIPAY) {
                $tempAmount = round($payReturnData['total_fee'], 4);
                if ($tempAmount != round($one['order_pay_amount'], 4)) {
                    return $this->false('支付金额非法');
                }
            } elseif ($bean->getPayType() == PayType::WXPAY) {
                $tempAmount = round($payReturnData['total_fee'], 4);
                if ($tempAmount != round($one['order_pay_amount'], 4)) {
                    return $this->false('支付金额非法');
                }
            }
        }
        $this->db()->beginTrans();
        try {
            switch ($one['order_type']) {
                case OrderType::CANTEEN_ORDER:
                    if ($bean->getPayType() == PayType::WALLET) {
                        throw new \Exception('支付类型错误');
                    }
                    //找出订的餐
                    $oneItems = $this->db()->table('order_items')
                        ->join('order_items', 'goods', array('goods_id' => 'id'), 'inner')
                        ->field('goods_id,item_total_amount', 'order_items')
                        ->field('name,price_sell,month,category_id', 'goods')
                        ->whereTable('order_items')
                        ->where(array('order_id' => $orderId))
                        ->multi();
                    if (!$oneItems) {
                        throw new \Exception('订餐信息不存在');
                    }
                    $goodsIds = array_column($oneItems, 'order_items_goods_id');
                    $this->db()->table('goods')->in('id', $goodsIds)->update(array(
                        'qty_sale' => array('exp', "`qty_sale` + 1"),
                        'qty_view' => array('exp', "`qty_view` + 1"),
                    ));
                    $bookingData = array();
                    foreach ($oneItems as $k => $v) {
                        $oneItems[$k]['goods_category_id'] = reset($v['goods_category_id']);
                        $oneItems[$k]['days'] = date('t', strtotime($v['goods_month']));
                        $bookingData[] = array(
                            'uid' => $one['order_uid'],
                            'goods_id' => $v['order_items_goods_id'],
                            'month' => $v['goods_month'],
                            'create_time' => $this->getNowDateTime(),
                        );
                    }
                    $this->db()->table('canteen_booking')->insertAll($bookingData);

                    $cateIds = array_column($oneItems, 'goods_category_id');
                    $cateList = $this->db()->table('goods_category')->field('id,name')->in('id', $cateIds)->multi();
                    $cateCombine = array_combine(array_column($cateList, 'goods_category_id'), $cateList);
                    foreach ($oneItems as $k => $v) {
                        $oneItems[$k]['goods_category_name'] = $cateCombine[$v['goods_category_id']]['goods_category_name'];
                    }
                    break;
                case OrderType::RECHARGE:
                    if ($bean->getPayType() == PayType::WALLET) {
                        throw new \Exception('支付类型错误');
                    }
                    //找出充值的商品价值
                    $oneItems = $this->db()->table('order_items')->field('item_total_amount')->where(array('order_id' => $orderId))->multi();
                    if (!$oneItems) {
                        throw new \Exception('充值商品不存在');
                    }
                    $rechargeValue = 0;
                    foreach ($oneItems as $ois) {
                        $rechargeValue += $ois['order_items_item_total_amount'];
                    }
                    if ($rechargeValue <= 0) {
                        throw new \Exception('充值商品金额错误');
                    }
                    //修改钱包
                    $walletBean = (new WalletBean());
                    $walletBean->setUid($one['order_uid']);
                    $walletBean->setType(WalletType::RECHARGE);
                    $walletBean->setBalanceLock($rechargeValue);
                    $walletBean->setData($one);
                    $walletBean->setCheckPassword(false);
                    $WalletModel = (new WalletModel());
                    if ($rechargeValue == $one['order_pay_amount']) {
                        $walletBean->setDescription('等值充值');
                    } elseif ($rechargeValue < $one['order_pay_amount']) {
                        $walletBean->setDescription('升价充值实际支付：' . $one['order_pay_amount']);
                    } elseif ($rechargeValue > $one['order_pay_amount']) {
                        $walletBean->setDescription('降价充值实际支付：' . $one['order_pay_amount']);
                    }
                    if (!$WalletModel->gateWay__($walletBean)) {
                        throw new \Exception($WalletModel->getFalseMsg());
                    }
                    break;
                default:
                    throw new \Exception('类型错误');
            }
            //修改订单
            $data = array();
            switch ($one['order_type']) {
                case OrderType::SHOPPING:
                    $data['status'] = OrderStatus::PAYED;
                    break;
                case OrderType::RECHARGE:
                    $data['status'] = OrderStatus::FINISH;
                    break;
            }
            $data['pay_status'] = PayStatus::PAYED;
            $data['pay_time'] = $this->getNowDateTime();
            $data['pay_type'] = $bean->getPayType();
            $data['pay_return_data'] = $payReturnData;
            $this->db()->table('order')->equalTo('id', $orderId)->update($data);
            //日志
            if (!$this->getLogModel()->recordPay__($orderId, $bean->getAuthUid(), $data)) {
                throw new \Exception($this->getLogModel()->getFalseMsg());
            }

            // TODO 插第三方表
            // 会员数据检测
            $userInfo = $this->db()->table('user')->field('login_name')->equalTo('uid', $one['order_uid'])->one();
            if (empty($userInfo['user_login_name'])) {
                throw new \Exception('用户身份无法从系统检验');
            }
            switch ($one['order_type']) {
                case OrderType::CANTEEN_ORDER:
                    if (empty($oneItems)) {
                        throw new \Exception('餐品数据错误');
                    }
                    $empInfo = $this->dbSchool()->schemas('dbo')->table('hr_employee')
                        ->field('empname,deptname,phyid')
                        ->equalTo('empno', $userInfo['user_login_name'])
                        ->one();
                    if (!$empInfo) {
                        throw new \Exception('用户身份无法从E卡通检验');
                    }
                    $eData = array();
                    foreach ($oneItems as $oi) {
                        $temp = array();
                        $temp['empno'] = $userInfo['user_login_name'];
                        $temp['empname'] = $empInfo['hr_employee_empname'];
                        $temp['deptname'] = $empInfo['hr_employee_deptname'];
                        $temp['ipaddr'] = '1';
                        $temp['phyid'] = $empInfo['hr_employee_phyid'];
                        $temp['sktime'] = '1900-01-01 '.date('H:i:s').'.000';
                        $temp['logname'] = 'admin';
                        $temp['logtime'] = $this->getNowDateTime();
                        switch ($oi['goods_category_name']) {
                            case '早餐':
                                $temp['rtype'] = 1;
                                break;
                            case '午餐':
                                $temp['rtype'] = 2;
                                break;
                            case '晚餐':
                                $temp['rtype'] = 3;
                                break;
                            default:
                                $temp['rtype'] = $oi['goods_category_name'];
                                break;
                        }
                        for ($i = 0; $i < $oi['days']; $i++) {
                            $temp['skdate'] = date('Y-m-d 00:00:00',strtotime($oi['goods_month']." +{$i}day"));
                            $eData[] = $temp;
                        }
                    }
                    $this->dbSchool()->table('dlc_record_dc')->insertAll($eData);
                    break;
                case OrderType::RECHARGE:
                    $empInfo = $this->dbSchool()->schemas('dbo')->table('hr_employee')
                        ->field('empname,deptname,phyid')
                        ->equalTo('empno', $userInfo['user_login_name'])
                        ->one();
                    if (!$empInfo) {
                        throw new \Exception('用户身份无法从E卡通检验');
                    }
                    $this->dbSchool()->table('dlc_recharge')->insert(array(
                        'empno' => $userInfo['user_login_name'],
                        'empname' => $empInfo['hr_employee_empname'],
                        'depname' => $empInfo['hr_employee_deptname'],
                        'addmoney' => $tempAmount,
                        'phyid' => $empInfo['hr_employee_phyid'],
                        'createtime' => $this->getNowDateTime(),
                    ));
                    break;
            }
        } catch (\Exception $e) {
            $this->db()->rollBackTrans();
            return $this->false($e->getMessage());
        }
        $this->db()->commitTrans();
        return true;
    }

    public function pay()
    {
        if (!$result = $this->pay__($this->getBean())) {
            return $this->error($this->getFalseMsg());
        }
        return $this->success();
    }

}
