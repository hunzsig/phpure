<?php

namespace Data\Model;

use Common\Map\IsEnable;
use Data\Bean\LinkCategoryBean;

class LinkCategoryModel extends AbstractModel
{

    /**
     * @return LinkCategoryBean
     */
    protected function getBean()
    {
        return parent::getBean(); // TODO: Change the autogenerated stub
    }

    /**
     * @param \library\Mysql $model
     * @return \library\Mysql
     */
    private function bindWhere($model)
    {
        $bean = $this->getBean();
        $bean->getId() && $model->in('id', $bean->getId());
        is_numeric($bean->getParentId()) && $model->in('parent_id', $bean->getParentId());
        $bean->getStatus() && $model->in('status', $bean->getStatus());
        $bean->getLevel() && $model->equalTo('level', $bean->getLevel());
        $bean->getName() && $model->like('name', "%" . $bean->getName() . "%");
        $bean->getDescription() && $model->like('description', "%" . $bean->getDescription() . "%");
        $bean->getPic() && $model->like('pic', "%" . $bean->getPic() . "%");
        return $model;
    }

    /**
     * 判断分类是否已经存在
     * @param $name
     * @param $id
     * @return bool
     */
    private function isExist($name, $id)
    {
        $one = $this->db()->table('data_link_category')->field('id')->equalTo('name', $name)->one();
        return ($one && $one['id'] != $id) ? true : false;
    }

    /**
     * 平铺式排序
     * @param $sourceData
     * @param array $targetData
     * @param int $pid
     * @return array
     */
    private function idealizeData_tile($sourceData, $targetData = array(), $pid = 0)
    {
        foreach ($sourceData as $k => $v) {
            if (!in_array($v, $targetData) && $v['parent_id'] == $pid) {
                $targetData[] = $v;
                $targetData = $this->idealizeData_tile($sourceData, $targetData, $v['id']);
            } else {
                continue;
            }
        }
        return $targetData;
    }

    /**
     * 层叠式排序
     * @param $sourceData
     * @param array $targetData
     * @param int $pid
     * @return array
     */
    private function idealizeData_contain($sourceData, $targetData = array(), $pid = 0)
    {
        foreach ($sourceData as $k => $v) {
            if (!in_array($v, $targetData[$pid]['contains']) && $v['parent_id'] == $pid) {
                $targetData[$pid]['contains'][$v['id']] = $v;
                $targetData[$pid]['contains'] = $this->idealizeData_contain($sourceData, $targetData[$pid]['contains'], $v['id']);
            } else {
                continue;
            }
        }
        return $targetData;
    }


    /**
     * 获取列表
     * @return array
     */
    public function getList()
    {
        $bean = $this->getBean();
        $model = $this->db()->table('data_link_category');
        $model = $this->bindWhere($model);
        if ($bean->getOrderBy()) {
            $model->orderByStr($bean->getOrderBy());
        } else {
            $model->orderBy('id');
            $model->orderBy('name');
            $model->orderBy('level');
        }
        if ($bean->getPage()) {
            $result = $model->page($bean->getPageCurrent(), $bean->getPagePer());
        } else {
            $result = $model->multi();
        }
        return $this->success($result);
    }

    /**
     * 获取列表 - 平铺叠列
     * @return array
     */
    public function getListWithTile()
    {
        $bean = $this->getBean();
        $bean->setLevel(null);
        $model = $this->db()->table('data_link_category');
        $model = $this->bindWhere($model);
        $model->orderBy('level');
        $model->orderBy('parent_id');
        $result = $model->multi();
        $result = $this->idealizeData_tile($result);
        return $this->success($result);
    }

    /**
     * 获取列表 - 上下级叠列
     * @return array
     */
    public function getListWithContain()
    {
        $bean = $this->getBean();
        $bean->setLevel(null);
        $model = $this->db()->table('data_link_category');
        $model = $this->bindWhere($model);
        $result = $model->multi();
        $result = $this->idealizeData_contain($result);
        return $this->success($result);
    }

    /**
     * 获取分类信息
     * @return array
     */
    public function getInfo()
    {
        $model = $this->db()->table('data_link_category');
        $model = $this->bindWhere($model);
        $info = $model->one();
        return $this->success($info ? $this->factoryData($info, function ($tempData) {
            $isEnable = (new IsEnable())->getKV();
            foreach ($tempData as $k => $v) {
                ($v['status']) && $tempData[$k]['status_label'] = $isEnable[$v['status']];
            }
        }) : array());
    }

    /**
     * 创建分类
     * @return array
     */
    public function add()
    {
        $bean = $this->getBean();
        if (!$bean->getName()) return $this->error('缺少分类名称');
        //分类存在判定
        if ($this->isExist($bean->getName(), 0)) {
            return $this->error('分类已存在，名称或者url标识相同。');
        }
        //获取层级
        if ($bean->getParentId() > 0) {
            $parentData = $this->db()->table('data_link_category')->field('level')->equalTo('id', $bean->getParentId())->one();
            $level = $parentData['level'] + 1;
        } else $level = 1;
        $data = array();
        $data['create_time'] = $this->getNowDateTime();
        $data['level'] = $level;
        $bean->getName() && $data['name'] = $bean->getName();
        $bean->getParentId() !== null && $data['parent_id'] = $bean->getParentId();
        $bean->getDescription() && $data['description'] = $bean->getDescription();
        $bean->getPic() && $data['pic'] = $bean->getPic();
        $bean->getStatus() && $data['status'] = $bean->getStatus();
        try {
            if (!$this->db()->table('data_link_category')->insert($data)) {
                throw new \Exception($this->db()->getError());
            }
            $id = $this->db()->lastInsertId();
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success($id);
    }

    /**
     * 编辑分类
     * @return bool|mixed
     */
    public function edit()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('fail id');
        if (!$bean->getName()) return $this->error('缺少分类名称');
        //分类存在判定
        if ($this->isExist($bean->getName(), $bean->getId())) {
            return $this->error('相同名称分类已存在');
        }
        //获取层级
        if ($bean->getParentId() > 0) {
            $parentData = $this->db()->table('data_link_category')->field('level')->equalTo('id', $bean->getParentId())->one();
            $level = $parentData['level'] + 1;
        } else $level = 1;

        $data = array();
        $data['update_time'] = $this->getNowDateTime();
        $data['level'] = $level;
        $bean->getName() && $data['name'] = $bean->getName();
        $bean->getParentId() !== null && $data['parent_id'] = $bean->getParentId();
        $bean->getDescription() && $data['description'] = $bean->getDescription();
        $bean->getPic() && $data['pic'] = $bean->getPic();
        $bean->getStatus() && $data['status'] = $bean->getStatus();
        try {
            $this->db()->table('data_link_category')->equalTo('id', $bean->getId())->update($data);
        } catch (\Exception $e) {
            return $this->error($e->getMessage());
        }
        return $this->success();
    }

    /**
     * 删除分类
     * @return array
     */
    public function del()
    {
        $bean = $this->getBean();
        if (!$bean->getId()) return $this->error('参数丢失');
        try {
            $this->db()->table('data_link_category')->equalTo('id', $bean->getId())->delete();
        } catch (\Exception $e) {
            $error = $e->getMessage();
            if (strpos($error, 'a foreign key constraint') !== false) {
                $error = '请先删除对应分类的链接！';
            }
            return $this->error($error);
        }
        return $this->success();
    }


}